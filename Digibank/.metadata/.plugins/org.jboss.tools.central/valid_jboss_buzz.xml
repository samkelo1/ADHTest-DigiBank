<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>DevNation Live: Event-driven business automation powered by cloud-native Java</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/iWKIf6pM02c/" /><category term="devnation" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="kogito" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><author><name>Editorial Team</name></author><id>searchisko:content:id:jbossorg_blog-devnation_live_event_driven_business_automation_powered_by_cloud_native_java</id><updated>2019-09-23T07:00:20Z</updated><published>2019-09-23T07:00:20Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/devnation/"&gt;&lt;span style="font-weight: 400;"&gt;DevNation Live tech talks&lt;/span&gt;&lt;/a&gt; are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, presented by Red Hat’s Maciej Swiderski, Principal Software Engineer, and &lt;a href="https://developers.redhat.com/node/204405/"&gt;Burr Sutter&lt;/a&gt;, Chief Developer Evangelist, you’ll learn about event-driven business automation using &lt;a href="https://developers.redhat.com/blog/2019/08/29/kogito-for-quarkus-intelligent-applications/"&gt;Kogito&lt;/a&gt;, Quarkus, and more.&lt;span id="more-628967"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Kogito is a new &lt;a href="https://developers.redhat.com/developer-tools/java"&gt;Java&lt;/a&gt; toolkit, based on Drools and jBPM, that’s made to bring rules and processes to the &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; world. This DevNation Live presentation shows how Kogito can be used to build cloud-ready, event-driven business applications, and it includes a demo of implementing the business logic of a complex domain.&lt;/p&gt; &lt;p&gt;Kogito itself is defined as a cloud-native business automation toolkit that helps you to build intelligent applications. It&amp;#8217;s way more than just a business process or a single business rule—it’s a bunch of business rules, and it&amp;#8217;s based on battle-tested capabilities.&lt;/p&gt; &lt;h3&gt;Focus on the business domain&lt;/h3&gt; &lt;p&gt;One of the most important things in the Kogito ecosystem, or in the way you build with Kogito, is the focus on the business domain rather than the technology itself.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-628987 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-business-1024x516.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-business-1024x516.png" alt="Kogito business" width="640" height="323" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-business-1024x516.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-business-300x151.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-business-768x387.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;In the example use case, we have a startup travel agency, called Kogito Travel Agency, that wants to increase its online presence. In the example, we have a traveler, a visa officer, and a travel assistant, all of whom want to be informed as soon as they need to react to some action that is waiting for them. In terms of the overall architecture, we have two main services: the Kogito travel agency service and the Kogito visas. Those are microservices.&lt;/p&gt; &lt;p&gt;The backbone of the application is actually a business process that is exposed as a service. The process itself has several nodes that you need to traverse, which define the way the application is actually built up. Then, we can use “process composition” to divide the actual business process into multiple steps or smaller pieces.&lt;/p&gt; &lt;h3&gt;Message events&lt;/h3&gt; &lt;p&gt;The other service, which is responsible for visa applications, is only initiated with the message event, and that message event is connected to a Kafka topic. As a message arises for the Kafka topic, it will create a new instance of that process.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-628997 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-process-1024x555.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-process-1024x555.png" alt="Kogito event process" width="640" height="347" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-process-1024x555.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-process-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-process-768x416.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;The idea is to start enhancing the process even more, so those events can produce other events that are of business relevance.&lt;/p&gt; &lt;p&gt;For the last step, the travel requests are completed. But, since everything is domain driven and business relevant, we can now take advantage of Grafana and the metrics that we expose. As you can see, it&amp;#8217;s not just that we have the basic information about travel requests—how many are open, canceled, or completed, etc. We also have indirect information about what services have been invoked or what rules have been applied.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-629007 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-metrics-1024x476.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-metrics-1024x476.png" alt="Kogito metrics" width="640" height="298" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-metrics-1024x476.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-metrics-300x139.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/kogito-metrics-768x357.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;So, now we can start deriving not only the business-related information but the domain-specific information as well.&lt;/p&gt; &lt;p&gt;Watch the complete presentation below:&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/6lZ2d7ZDpFk" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;Get more details in the demo: &lt;a href="https://github.com/mswiderski/kogito-travel-agency-tutorial"&gt;https://github.com/mswiderski/kogito-travel-agency-tutorial&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Join us at an upcoming&lt;a href="https://developers.redhat.com/events/"&gt; developer event&lt;/a&gt;, and see our collection of&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt; past DevNation Live tech talks&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F23%2Fdevnation-live-event-driven-business-automation-powered-by-cloud-native-java%2F&amp;#38;linkname=DevNation%20Live%3A%20Event-driven%20business%20automation%20powered%20by%20cloud-native%20Java" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F23%2Fdevnation-live-event-driven-business-automation-powered-by-cloud-native-java%2F&amp;#38;linkname=DevNation%20Live%3A%20Event-driven%20business%20automation%20powered%20by%20cloud-native%20Java" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F23%2Fdevnation-live-event-driven-business-automation-powered-by-cloud-native-java%2F&amp;#38;linkname=DevNation%20Live%3A%20Event-driven%20business%20automation%20powered%20by%20cloud-native%20Java" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F23%2Fdevnation-live-event-driven-business-automation-powered-by-cloud-native-java%2F&amp;#38;linkname=DevNation%20Live%3A%20Event-driven%20business%20automation%20powered%20by%20cloud-native%20Java" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F23%2Fdevnation-live-event-driven-business-automation-powered-by-cloud-native-java%2F&amp;#38;linkname=DevNation%20Live%3A%20Event-driven%20business%20automation%20powered%20by%20cloud-native%20Java" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F23%2Fdevnation-live-event-driven-business-automation-powered-by-cloud-native-java%2F&amp;#38;linkname=DevNation%20Live%3A%20Event-driven%20business%20automation%20powered%20by%20cloud-native%20Java" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F23%2Fdevnation-live-event-driven-business-automation-powered-by-cloud-native-java%2F&amp;#38;linkname=DevNation%20Live%3A%20Event-driven%20business%20automation%20powered%20by%20cloud-native%20Java" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F23%2Fdevnation-live-event-driven-business-automation-powered-by-cloud-native-java%2F&amp;#038;title=DevNation%20Live%3A%20Event-driven%20business%20automation%20powered%20by%20cloud-native%20Java" data-a2a-url="https://developers.redhat.com/blog/2019/09/23/devnation-live-event-driven-business-automation-powered-by-cloud-native-java/" data-a2a-title="DevNation Live: Event-driven business automation powered by cloud-native Java"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/23/devnation-live-event-driven-business-automation-powered-by-cloud-native-java/"&gt;DevNation Live: Event-driven business automation powered by cloud-native Java&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/iWKIf6pM02c" height="1" width="1" alt=""/&gt;</content><summary>DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, presented by Red Hat’s Maciej Swiderski, Principal Software Engineer, and Burr Sutter, Chief Developer Evangelist, you’ll learn about event-driven business automation using Kogito, Quarkus, and more. Kog...</summary><dc:creator>Editorial Team</dc:creator><dc:date>2019-09-23T07:00:20Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/23/devnation-live-event-driven-business-automation-powered-by-cloud-native-java/</feedburner:origLink></entry><entry><title>Using Red Hat OpenShift image streams with Kubernetes deployments</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JV3A5LHHnvY/" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="OpenShift4" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="Universal Base Images (UBI)" scheme="searchisko:content:tags" /><author><name>Fernando Lozano</name></author><id>searchisko:content:id:jbossorg_blog-using_red_hat_openshift_image_streams_with_kubernetes_deployments</id><updated>2019-09-20T07:00:12Z</updated><published>2019-09-20T07:00:12Z</published><content type="html">&lt;p&gt;This article demonstrates an application update scenario which leverages &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; image streams together with standard &lt;a href="http://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; native resources. It also shows how image streams automatically redeploy application pods after an update to their container image.&lt;/p&gt; &lt;p&gt;Best of all, Kubernetes resources enhanced with OpenShift image streams are still compatible with standard Kubernetes clusters. This fact enables the use of the same resource definitions to support multiple Kubernetes distributions, and at the same time take advantage of features unique to OpenShift.&lt;/p&gt; &lt;p&gt;At the end of this article, we present a few considerations around using image IDs and image name tags to manage your ability to roll back to previous versions of an application.&lt;span id="more-628297"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Benefits of image streams&lt;/h2&gt; &lt;p&gt;One of the main features that OpenShift provides over upstream Kubernetes is image stream resources. Using image streams brings many benefits, including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Portability&lt;/strong&gt;: Image streams make your pods independent of registry servers. You can copy container images from a public registry on the internet into a private registry inside your organization. There is no need to change image references or container engine configurations on your cluster nodes.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Image stream names and image stream tags can follow whatever standards fit your organization. Container image names and tags follow different conventions and have different meanings depending on the vendor.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Reproducibility&lt;/strong&gt;: Image streams make it easy to reference immutable container images by their image IDs. Image names and tags are mutable and could point to different images at different times. Image streams ensure that pods use a known, fixed image ID.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Stability&lt;/strong&gt;: Image streams ensure that all replica pods use the same immutable image. Pods from the same replica set, that each reference images using names and tags, may end up running different container images. Users might get different results depending on which pod a service or an ingress sends each request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Reversibility&lt;/strong&gt;: If an image name and tag changes and the new container image has issues, there is no reliable way to roll back to the last known good container image. Because image streams keep a history (stream) of image IDs, generations, and time stamps, you can identify and roll back to an older, known working image if needed.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt;: An image stream generates image change events that trigger the redeployment of pods from workload resources that reference the image stream. This feature allows for simple continuous deployment (CD) scenarios without requiring Jenkins and other complex tools.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;OpenShift image stream basics&lt;/h2&gt; &lt;p&gt;Image streams are named references to container images. The OpenShift extension resources reference container images indirectly, using image streams. Kubernetes standard resources reference container images directly by their registry, name, and tag.&lt;/p&gt; &lt;p&gt;Kubernetes users can avoid stability, reproducibility, and reversibility issues by properly managing image tags. By the end of the demonstration, you should have an understanding of how these issues may affect Kubernetes deployments, and some strategies to prevent these issue. This task can be done, regardless, but it is easier using OpenShift image streams.&lt;/p&gt; &lt;p&gt;Image streams are part of the OpenShift extension APIs. Other OpenShift extension resources, such as build configurations and deployment configurations, provide native support for image streams. OpenShift tooling, such as the &lt;code&gt;oc&lt;/code&gt; command, offers easy-to-use commands to manage image stream resources, as well as other extension API resources.&lt;/p&gt; &lt;p&gt;OpenShift adds its extension APIs using standard Kubernetes extension mechanisms, such as custom resource definitions (CRDs) and admission plugins. This feature allows OpenShift to support using image streams together with standard Kubernetes workload API resources, such as Deployments, StatefulSets, and Jobs.&lt;/p&gt; &lt;h2&gt;Demonstration scenario&lt;/h2&gt; &lt;p&gt;Maybe you are not ready to switch fully to OpenShift extensions. Maybe you need to keep supporting other Kubernetes distributions. Don’t worry, you can enable image stream support for standard Kubernetes resources in a non-intrusive way. These OpenShift-enhanced resources can be used with standard Kubernetes distributions that will silently ignore the OpenShift extensions since the necessary modifications are made to these resources using annotations.&lt;/p&gt; &lt;p&gt;Kubernetes annotations allow adding non-identifying metadata to any Kubernetes resource. Any data stored as an annotation does not change the schema nor the semantics of a Kubernetes resource.&lt;/p&gt; &lt;p&gt;The fact that OpenShift uses annotations means that the same YAML file works unchanged with any standard Kubernetes cluster while taking advantage of image streams on an OpenShift cluster. When you use that YAML file with OpenShift, it processes the annotations. When you use the same YAML file with a Kubernetes distribution without image Streams, it simply works as if the annotations were not there.&lt;/p&gt; &lt;h3&gt;Choosing test container images&lt;/h3&gt; &lt;p&gt;To emulate an application update scenario, we need two versions of a container image. One of them is the old image, and the other is the new image. To keep things simple and be compliant with the Red Hat Enterprise Linux (RHEL) EULA, the demonstration uses the base Universal Base Image (UBI).&lt;/p&gt; &lt;p&gt;Start by finding the currently available tags for Red Hat&amp;#8217;s UBI base image. You can use the &lt;code&gt;skopeo inspect&lt;/code&gt; command and, if you wish, filter the output using the &lt;code&gt;jq&lt;/code&gt; JSON parser:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;skopeo inspect docker://registry.access.redhat.com/ubi8/ubi \ &lt;/b&gt;&lt;b&gt;| jq -r '.RepoTags' -&lt;/b&gt; [   "8.0",   "8.0-122",   "8.0-126",   "8.0-129",   "8.0-154",   "latest" ]&lt;/pre&gt; &lt;p&gt;Smaller numbers denote older builds of the UBI base image, and higher numbers are more recent builds. For the following demonstration, the tags &lt;code&gt;8.0-122&lt;/code&gt; and &lt;code&gt;8.0-154&lt;/code&gt; are used.&lt;/p&gt; &lt;p&gt;This demonstration illustrates the method in which Red Hat manages image tags. Red Hat never overrides tags named as &lt;em&gt;major-minor-build&lt;/em&gt;. Other tags, such as &lt;em&gt;major-minor&lt;/em&gt; (e.g., &lt;code&gt;8.0&lt;/code&gt; and &lt;code&gt;latest&lt;/code&gt;) are floating tags. Floating tags refer to a tag that point to different container images by ID over time.&lt;/p&gt; &lt;h3&gt;Deploying basic Kubernetes&lt;/h3&gt; &lt;p&gt;To make sure you control container image updates during this demonstration, copy the old container image into a public registry. For example, &lt;a href="https://quay.io/" target="_blank" rel="noopener noreferrer"&gt;Quay.io&lt;/a&gt; is used in this demonstration. You can register at Quay.io for free and publish your container images there for everyone to consume.&lt;/p&gt; &lt;p&gt;Use the Quay.io web interface to create a public repository on your Quay.io account. Name that repository &lt;code&gt;ubi&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Log in to Quay.io using &lt;code&gt;podman&lt;/code&gt; and copy your old UBI image there using &lt;code&gt;skopeo&lt;/code&gt;. Replace &lt;code&gt;flozanorht&lt;/code&gt; in the following commands with your Quay.io account, and tag the destination image as &lt;code&gt;8&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;podman login -u &lt;/b&gt;&lt;b&gt;&lt;i&gt;flozanorht&lt;/i&gt;&lt;/b&gt;&lt;b&gt; quay.io&lt;/b&gt; Password: Login Succeeded! $ &lt;b&gt;skopeo copy docker://registry.access.redhat.com/ubi8/ubi:8.0-122 \&lt;/b&gt; &lt;b&gt;docker://quay.io/&lt;/b&gt;&lt;b&gt;&lt;i&gt;flozanorht&lt;/i&gt;&lt;/b&gt;&lt;b&gt;/ubi:8&lt;/b&gt; ... Writing manifest to image destination Storing signatures&lt;/pre&gt; &lt;p&gt;The following listing shows a Kubernetes Deployment resource that references the old image. This is a bare deployment on purpose and does not include important features that are typically included on runtime resources, such as health probes and resource limits, in order to focus on adding support for image streams.&lt;/p&gt; &lt;p&gt;Remember to change the &lt;code&gt;image&lt;/code&gt; attribute to refer to your Quay.io account:&lt;/p&gt; &lt;pre&gt;apiVersion: apps/v1 kind: Deployment metadata:   name: myapp   labels:     app: myapp spec:   selector:     matchLabels:       app: myapp   replicas: 1   template:     metadata:       labels:         app: myapp     spec:       containers:         - name: myapp           image: quay.io/&lt;i&gt;flozanorht&lt;/i&gt;/ubi:8           command:             - "/bin/bash"             - "-c"             - "while true; do ls /root/buildinfo/; sleep 30; done"&lt;/pre&gt; &lt;p&gt;This deployment creates pods that loop forever, logging the contents of &lt;code&gt;/root/buildinfo&lt;/code&gt;. Red Hat updates a file name under this folder with the build number of each new UBI base image. We will use this log to verify that running pods are actually using the appropriate image.&lt;/p&gt; &lt;h3&gt;Deploying on OpenShift the Kubernetes way&lt;/h3&gt; &lt;p&gt;Log into your OpenShift cluster, which can be either a recent release of OpenShift 3.x or a more recent release of OpenShift 4.x, and either be hosted at a cloud provider or on your local laptop using &lt;a href="https://www.okd.io/minishift/" target="_blank" rel="noopener noreferrer"&gt;Minishift&lt;/a&gt; or &lt;a href="https://github.com/code-ready/crc" target="_blank" rel="noopener noreferrer"&gt;CodeReady Containers&lt;/a&gt;. This demonstration should work the same way for each of these options.&lt;/p&gt; &lt;p&gt;I am using the OpenShift &lt;code&gt;oc&lt;/code&gt; command-line tool, but the following steps would work the same way using the &lt;code&gt;kubectl&lt;/code&gt; command and a standard Kubernetes cluster. I will only use features exclusive to OpenShift when I create an image stream.&lt;/p&gt; &lt;p&gt;Create a new project and create the Kubernetes deployment resource from the YAML file referenced previously:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc create -f myapp.yaml&lt;/b&gt; deployment.apps/myapp created&lt;/pre&gt; &lt;p&gt;After a few moments, a running pod with one container will be ready:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc get deployment&lt;/b&gt; NAME    READY UP-TO-DATE   AVAILABLE AGE myapp   1/1 1            1 6s $ &lt;b&gt;oc get pod&lt;/b&gt; NAME                    READY STATUS RESTARTS   AGE myapp-75c97cd8f-m5pjk   1/1     Running   0 10s&lt;/pre&gt; &lt;p&gt;Check the pod logs, replacing the name of the pod from the above command&amp;#8217;s output, to see the build number of its container image. It should match the tag you picked up as your old image:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc logs myapp-&lt;/b&gt;&lt;b&gt;75c97cd8f-m5pjk&lt;/b&gt;&lt;b&gt; | tail -n1&lt;/b&gt; Dockerfile-ubi8-8.0-122&lt;/pre&gt; &lt;p&gt;Verify that the running pod references the old container image by its name and tag:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc get pod myapp-&lt;/b&gt;&lt;b&gt;75c97cd8f-m5pjk&lt;/b&gt;&lt;b&gt; -o &lt;/b&gt;&lt;b&gt;jsonpath='{.spec.containers[0].image}{"\n"}'&lt;/b&gt; quay.io/flozanorht/ubi:8&lt;/pre&gt; &lt;h3&gt;Creating an image stream&lt;/h3&gt; &lt;p&gt;So far, we could be using any Kubernetes distribution and its associated &lt;code&gt;kubectl&lt;/code&gt; command-line tool. Now we switch to the OpenShift-specific features.&lt;/p&gt; &lt;p&gt;Create an image stream that points to your old image on Quay.io. Also included is an image stream tag resource which points to the current image ID of the old image name and the tag it references.&lt;/p&gt; &lt;p&gt;Remember to change the image name on the following command to refer to your Quay.io account:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc import-image ubi --confirm --all --from quay.io/&lt;/b&gt;&lt;b&gt;&lt;i&gt;flozanorht&lt;/i&gt;&lt;/b&gt;&lt;b&gt;/ubi&lt;/b&gt; imagestream.image.openshift.io/ubi imported ... $ &lt;b&gt;oc get istag&lt;/b&gt; NAME    IMAGE REF                                   UPDATED ubi:8   quay.io/flozanorht/ubi@sha256:a17a...e8e1   6 seconds ago&lt;/pre&gt; &lt;p&gt;Record the image ID as it will be referenced later: It is the string of random hexadecimal numbers after the &lt;code&gt;sha256&lt;/code&gt; text. This string is the real ID of an immutable container image. It will be compared with the ID you get after the container image is updated.&lt;/p&gt; &lt;h3&gt;Adding OpenShift annotations to a Kubernetes deployment&lt;/h3&gt; &lt;p&gt;Now starts the real fun. The &lt;code&gt;oc&lt;/code&gt; tool provides the handy command &lt;code&gt;oc set triggers&lt;/code&gt; that adds an image change trigger annotation to Kubernetes resources via the workloads API. This command takes the name of the image stream and the tag:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc set triggers deployment/myapp --from-image ubi:8 -c myapp&lt;/b&gt; deployment.extensions/myapp triggers updated&lt;/pre&gt; &lt;p&gt;List the deployment resource in raw YAML format to see the annotation that does the &amp;#8220;magic:&amp;#8221;&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc get deployment myapp -o yaml | grep -A2 annotations:&lt;/b&gt;   annotations:     deployment.kubernetes.io/revision: "2"    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"ubi:8"},"fieldPath":"spec.template.spec.containers[?(@.name==\"myapp\")].image"}]'&lt;/pre&gt; &lt;p&gt;This annotation uses a &lt;a href="https://github.com/json-path/JsonPath" target="_blank" rel="noopener noreferrer"&gt;JSONpath&lt;/a&gt; expression to update the image reference inside the Kubernetes resource. If you want to use image streams with other kinds of Kubernetes resources, such as cron jobs, you need to modify the JSONpath expression appropriately. If you use the &lt;code&gt;oc set triggers&lt;/code&gt; command, OpenShift provides the expression for you.&lt;/p&gt; &lt;p&gt;Adding this annotation fires an image change event to make sure the currently running pods use the container ID from the image stream. After a few moments, the new pod is ready and running. Check that it now refers to the same image ID from the image stream:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc get pod&lt;/b&gt; NAME                     READY STATUS RESTARTS   AGE myapp-58cc598448-qr2xn   1/1 Running 0     10s $ &lt;b&gt;oc get pod myapp-58cc598448-qr2xn -o &lt;/b&gt;&lt;b&gt;jsonpath='{.spec.containers[0].image}{"\n"}'&lt;/b&gt; quay.io/flozanorht/ubi@sha256:a17a..e8e1&lt;/pre&gt; &lt;h2&gt;Automatic redeployment on image updates&lt;/h2&gt; &lt;p&gt;Copy your &amp;#8220;new&amp;#8221; container image to Quay.io, overriding the same name and tag that referred to the old image:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;skopeo copy docker://registry.access.redhat.com/ubi8/ubi:8.0-154 \&lt;/b&gt; &lt;b&gt;docker://quay.io/&lt;/b&gt;&lt;b&gt;&lt;i&gt;flozanorht&lt;/i&gt;&lt;/b&gt;&lt;b&gt;/ubi:8&lt;/b&gt; ...&lt;/pre&gt; &lt;p&gt;Verify that the pod is still using the old container image ID:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc get pod myapp-58cc598448-qr2xn -o &lt;/b&gt;&lt;b&gt;jsonpath='{.spec.containers[0].image}{"\n"}'&lt;/b&gt; quay.io/flozanorht/ubi@sha256:a17a..e8e1&lt;/pre&gt; &lt;p&gt;Update your image stream to point to the new image and verify that the image stream tag now refers to a new image ID:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc import-image ubi --confirm --all&lt;/b&gt; imagestream.image.openshift.io/mysql imported ... $ &lt;b&gt;oc get istag&lt;/b&gt; NAME    MAGE REF                                   UPDATED ubi:8   quay.io/flozanorht/ubi@sha256:985e..286e   34 seconds ago&lt;/pre&gt; &lt;p&gt;Updating the image stream triggers a redeployment. After a few moments, a new pod will be created referencing the new image ID:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc get pod&lt;/b&gt; NAME                     READY STATUS RESTARTS   AGE myapp-6b6c9c9787-t8kmd   1/1 Running 0     24s $ &lt;b&gt;oc get pod myapp-6b6c9c9787-t8kmd -o &lt;/b&gt;&lt;b&gt;jsonpath='{.spec.containers[0].image}{"\n"}'&lt;/b&gt; quay.io/flozanorht/ubi@sha256:985e..286e&lt;/pre&gt; &lt;p&gt;Finally, the new pod&amp;#8217;s logs show the new container image&amp;#8217;s build number:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc logs myapp-6b6c9c9787-t8kmd | tail -n1&lt;/b&gt; Dockerfile-ubi8-8.0-154&lt;/pre&gt; &lt;p&gt;Events on the Kubernetes deployment shows both redeployments as scale up and down events of its replica set:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc describe deployment myapp&lt;/b&gt; ... Events:  Type    Reason             Age   From                 Message  ----    ------             ----  ----                 -------   Normal  ScalingReplicaSet  18m    deployment-controller  Scaled up replica set myapp-75c97cd8f to 1   Normal  ScalingReplicaSet  13m    deployment-controller  Scaled up replica set myapp-58cc598448 to 1   Normal  ScalingReplicaSet  12m    deployment-controller  Scaled down replica set myapp-75c97cd8f to 0  Normal  ScalingReplicaSet  2m53s deployment-controller  Scaled up replica set myapp-6b6c9c9787 to 1  Normal  ScalingReplicaSet  2m41s deployment-controller  Scaled down replica set myapp-58cc598448 to 0&lt;/pre&gt; &lt;p&gt;Remember you got two redeployments: the first when adding the annotation and the second when updating the image stream. You may wonder if you had created the deployment resource already including the annotation, instead of adding it later, would this prevent one redeployment? The answer is no.&lt;/p&gt; &lt;p&gt;OpenShift triggers the image change event after the deployment resource is created. By that time, the Kubernetes deployment already created a replica set and a pod. The only change would be that no pods from the first deployment would ever be seen. They would be replaced by new pods before reaching the running state.&lt;/p&gt; &lt;p&gt;You can describe the image stream to see its history (or stream) of image IDs, in reverse chronological order:&lt;/p&gt; &lt;pre&gt;$ &lt;b&gt;oc describe is ubi | grep -A5 tagged&lt;/b&gt;   tagged from quay.io/flozanorht/ubi:8   * quay.io/flozanorht/ubi@sha256:985e..286e       10 minutes ago     quay.io/flozanorht/ubi@sha256:a17a..e8e1       10 minutes ago&lt;/pre&gt; &lt;p&gt;You can force your image stream to use an older image ID, thus safely rolling back to a previous known-good container image.&lt;/p&gt; &lt;h2&gt;Much more to learn about image streams&lt;/h2&gt; &lt;p&gt;This demonstration only touched upon the basics of image streams in OpenShift. Other nice features of image streams include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Image streams with multiple tags&lt;/strong&gt;: Each tag can refer to a different registry, image names, and tags.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Scheduled updates to image streams&lt;/strong&gt;: More built-in automation.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Image streams that reference other image streams&lt;/strong&gt;: Multiple levels of indirection.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Image streams and pull secrets in shared projects&lt;/strong&gt;: Make it easier for your team to use your enterprise registry.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Deploy code changes instantly&lt;/strong&gt;: Push OpenShift builds to an image stream.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Alternatives to image streams for managing image IDs&lt;/h2&gt; &lt;p&gt;The stability, reproducibility, and reversibility issues hinted at in the introduction are consequences of using floating container image tags. If your organization (or your vendor) manages their tags by providing a new non-floating tag for each new image, as Red Hat provides for its container images, you can rely on these tags to avoid multiple pods of your application running different container images.&lt;/p&gt; &lt;p&gt;Sure, it&amp;#8217;s more convenient for a developer to deploy the &lt;code&gt;ubi8/ubi:8.0&lt;/code&gt; image than the &lt;code&gt;ubi8/ubi:8.0-122&lt;/code&gt; image. Standard Kubernetes provides no automated mechanism to take a floating tag and record the image ID associated with it at different points in time. OpenShift makes using floating tags safe, thanks to image streams.&lt;/p&gt; &lt;p&gt;If you create your Kubernetes deployments to reference non-floating tags, you need to update the deployment resource when you update your application. You could implement these updates as part of a CI/CD pipeline using a tool like &lt;a href="https://jenkins.io" target="_blank" rel="noopener noreferrer"&gt;Jenkins&lt;/a&gt; or &lt;a href="https://tekton.dev" target="_blank" rel="noopener noreferrer"&gt;Tekton&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Operator-based software, such as &lt;a href="https://developers.redhat.com/products/openshift"&gt;Red Hat OpenShift Container Platform 4&lt;/a&gt; cluster operators, configure their Deployments to reference image IDs and do not rely on any tag. New releases rely on the &lt;a href="https://docs.openshift.com/container-platform/4.1/applications/operators/olm-understanding-olm.html" target="_blank" rel="noopener noreferrer"&gt;Operator Lifecycle Manager&lt;/a&gt; to update its deployments.&lt;/p&gt; &lt;p&gt;Note that using image IDs alone may not excuse you from managing non-floating tags. Your strategy depends on your registry server software. The OpenShift internal registry retains a configurable number of old image IDs for an image name. Older images will be &lt;a href="https://docs.openshift.com/container-platform/3.11/admin_guide/pruning_resources.html" target="_blank" rel="noopener noreferrer"&gt;pruned&lt;/a&gt; and it is not possible to roll back to them.&lt;/p&gt; &lt;p&gt;Red Hat Quay follows a different approach: All images whose IDs are not referenced by any tag are pruned by a background task. Registry servers that follow this approach require that you maintain non-floating tags to prevent image pruning.&lt;/p&gt; &lt;h3&gt;Learn more&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/managing_images.html#using-is-with-k8s" target="_blank" rel="noopener noreferrer"&gt;Using Image Streams with Kubernetes Resources&lt;/a&gt; from Red Hat OpenShift Container Platform 3.11 product documentation, but applies equally well to Red Hat OpenShift Container Platform 4.x.&lt;/li&gt; &lt;li&gt;&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/managing_images.html" target="_blank" rel="noopener noreferrer"&gt;Managing Images&lt;/a&gt; from Red Hat OpenShift Container Platform 3.11 product documentation, but most of it applies equally well to Red Hat OpenShift Container Platform 4.x.&lt;/li&gt; &lt;li&gt;&lt;a href="https://blog.openshift.com/image-streams-faq/" target="_blank" rel="noopener noreferrer"&gt;How to Simplify Container Image Management in Kubernetes with OpenShift Image Streams&lt;/a&gt;&lt;/li&gt; &lt;li&gt;To try this demonstration using your laptop, get either Minisift for OpenShift 3.x, as part of the &lt;a href="https://developers.redhat.com/products/cdk/overview"&gt;Container Development Kit&lt;/a&gt;, or &lt;a href="https://cloud.redhat.com/openshift/install/crc/installer-provisioned"&gt;CodeReady Containers&lt;/a&gt; for OpenShift 4.x.&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.okd.io/"&gt;The OKD project&lt;/a&gt; is the upstream for Red Hat OpenShift Container Platform 3.x.&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/openshift/cluster-openshift-apiserver-operator" target="_blank" rel="noopener noreferrer"&gt;The openshift api server operator&lt;/a&gt; at GitHub is one of the many projects that provide Kubernetes extension APIs for Red Hat OpenShift Container Platform 4.x.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;em&gt;Thanks to Adan Kaplan, Andrew Block, Ben Browning, and Raffaele Spazzoli for their reviews and comments on drafts of this article.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F20%2Fusing-red-hat-openshift-image-streams-with-kubernetes-deployments%2F&amp;#38;linkname=Using%20Red%20Hat%20OpenShift%20image%20streams%20with%20Kubernetes%20deployments" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F20%2Fusing-red-hat-openshift-image-streams-with-kubernetes-deployments%2F&amp;#38;linkname=Using%20Red%20Hat%20OpenShift%20image%20streams%20with%20Kubernetes%20deployments" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F20%2Fusing-red-hat-openshift-image-streams-with-kubernetes-deployments%2F&amp;#38;linkname=Using%20Red%20Hat%20OpenShift%20image%20streams%20with%20Kubernetes%20deployments" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F20%2Fusing-red-hat-openshift-image-streams-with-kubernetes-deployments%2F&amp;#38;linkname=Using%20Red%20Hat%20OpenShift%20image%20streams%20with%20Kubernetes%20deployments" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F20%2Fusing-red-hat-openshift-image-streams-with-kubernetes-deployments%2F&amp;#38;linkname=Using%20Red%20Hat%20OpenShift%20image%20streams%20with%20Kubernetes%20deployments" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F20%2Fusing-red-hat-openshift-image-streams-with-kubernetes-deployments%2F&amp;#38;linkname=Using%20Red%20Hat%20OpenShift%20image%20streams%20with%20Kubernetes%20deployments" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F20%2Fusing-red-hat-openshift-image-streams-with-kubernetes-deployments%2F&amp;#38;linkname=Using%20Red%20Hat%20OpenShift%20image%20streams%20with%20Kubernetes%20deployments" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F20%2Fusing-red-hat-openshift-image-streams-with-kubernetes-deployments%2F&amp;#038;title=Using%20Red%20Hat%20OpenShift%20image%20streams%20with%20Kubernetes%20deployments" data-a2a-url="https://developers.redhat.com/blog/2019/09/20/using-red-hat-openshift-image-streams-with-kubernetes-deployments/" data-a2a-title="Using Red Hat OpenShift image streams with Kubernetes deployments"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/20/using-red-hat-openshift-image-streams-with-kubernetes-deployments/"&gt;Using Red Hat OpenShift image streams with Kubernetes deployments&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JV3A5LHHnvY" height="1" width="1" alt=""/&gt;</content><summary>This article demonstrates an application update scenario which leverages Red Hat OpenShift image streams together with standard Kubernetes native resources. It also shows how image streams automatically redeploy application pods after an update to their container image. Best of all, Kubernetes resources enhanced with OpenShift image streams are still compatible with standard Kubernetes clusters. T...</summary><dc:creator>Fernando Lozano</dc:creator><dc:date>2019-09-20T07:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/20/using-red-hat-openshift-image-streams-with-kubernetes-deployments/</feedburner:origLink></entry><entry><title>DevNation Live Bengaluru: Java microservices and how to become cloud-native</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/uRs1yIrOIyE/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="devnation" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><author><name>Editorial Team</name></author><id>searchisko:content:id:jbossorg_blog-devnation_live_bengaluru_java_microservices_and_how_to_become_cloud_native</id><updated>2019-09-19T07:00:29Z</updated><published>2019-09-19T07:00:29Z</published><content type="html">&lt;p&gt;Our first &lt;a href="https://developers.redhat.com/devnationlive-india/"&gt;DevNation Live regional event was held in Bengaluru, India&lt;/a&gt; in July. This free technology event focused on open source innovations, with sessions presented by elite Red Hat technologists.&lt;/p&gt; &lt;p&gt;Many of us are on a journey from traditional monolithic applications to a more distributed cloud-native &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt; architecture. In this session, &lt;a href="https://developers.redhat.com/blog/author/burrsutter/"&gt;Burr Sutter&lt;/a&gt; discusses the key microservices architecture principles and explains how and why to evolve to this approach. You&amp;#8217;ll learn how to become a new cloud-native developer and architect.&lt;span id="more-622047"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Watch the complete presentation:&lt;br /&gt; &lt;iframe src="https://www.youtube.com/embed/VSofy6cssbo" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Join us at an upcoming&lt;/span&gt;&lt;a href="https://developers.redhat.com/events/"&gt; &lt;span style="font-weight: 400;"&gt;developer event&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, and see our collection of&lt;/span&gt;&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt; &lt;span style="font-weight: 400;"&gt;past DevNation Live tech talks&lt;/span&gt;&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F19%2Fdevnation-live-bengaluru-java-microservices-and-how-to-become-cloud-native%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Java%20microservices%20and%20how%20to%20become%20cloud-native" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F19%2Fdevnation-live-bengaluru-java-microservices-and-how-to-become-cloud-native%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Java%20microservices%20and%20how%20to%20become%20cloud-native" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F19%2Fdevnation-live-bengaluru-java-microservices-and-how-to-become-cloud-native%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Java%20microservices%20and%20how%20to%20become%20cloud-native" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F19%2Fdevnation-live-bengaluru-java-microservices-and-how-to-become-cloud-native%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Java%20microservices%20and%20how%20to%20become%20cloud-native" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F19%2Fdevnation-live-bengaluru-java-microservices-and-how-to-become-cloud-native%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Java%20microservices%20and%20how%20to%20become%20cloud-native" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F19%2Fdevnation-live-bengaluru-java-microservices-and-how-to-become-cloud-native%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Java%20microservices%20and%20how%20to%20become%20cloud-native" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F19%2Fdevnation-live-bengaluru-java-microservices-and-how-to-become-cloud-native%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Java%20microservices%20and%20how%20to%20become%20cloud-native" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F19%2Fdevnation-live-bengaluru-java-microservices-and-how-to-become-cloud-native%2F&amp;#038;title=DevNation%20Live%20Bengaluru%3A%20Java%20microservices%20and%20how%20to%20become%20cloud-native" data-a2a-url="https://developers.redhat.com/blog/2019/09/19/devnation-live-bengaluru-java-microservices-and-how-to-become-cloud-native/" data-a2a-title="DevNation Live Bengaluru: Java microservices and how to become cloud-native"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/19/devnation-live-bengaluru-java-microservices-and-how-to-become-cloud-native/"&gt;DevNation Live Bengaluru: Java microservices and how to become cloud-native&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/uRs1yIrOIyE" height="1" width="1" alt=""/&gt;</content><summary>Our first DevNation Live regional event was held in Bengaluru, India in July. This free technology event focused on open source innovations, with sessions presented by elite Red Hat technologists. Many of us are on a journey from traditional monolithic applications to a more distributed cloud-native microservices architecture. In this session, Burr Sutter discusses the key microservices architectu...</summary><dc:creator>Editorial Team</dc:creator><dc:date>2019-09-19T07:00:29Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/19/devnation-live-bengaluru-java-microservices-and-how-to-become-cloud-native/</feedburner:origLink></entry><entry><title>Red Hat Forum Poland - Keynote and a Journey Through 3 Pitfalls</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/cLdO0PD-g9E/red-hat-forum-poland-keynote-and-journey-through-3-pitfalls.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_forum_poland_keynote_and_a_journey_through_3_pitfalls</id><updated>2019-09-19T05:00:02Z</updated><published>2019-09-19T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://www.redhat.com/en/global-forums-2019" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="red hat forum" border="0" data-original-height="518" data-original-width="1600" height="103" src="https://1.bp.blogspot.com/-RP359dswVEk/XYHmsHC2RDI/AAAAAAAAvNs/dNUtL3aUuK06u1zh2YQdt1TmasWHGe9UACNcBGAsYHQ/s320/Screenshot%2B2019-09-18%2Bat%2B10.11.11.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Every year in the fall Red Hat organizes events known as &lt;a href="https://www.redhat.com/en/global-forums-2019" target="_blank"&gt;Red Hat Forums&lt;/a&gt;. These are smaller versions of the experience you can have at Red Hat Summit, without having to travel to either Boston or San Francisco (they switch coasts every year). To make it even easier they are organized all over the various regions of the world, from North America, Europe, and Asia.&lt;br /&gt;&lt;br /&gt;On occasion I'm asked to help out by presenting a keynote and sessions during one of the European Red Hat Forums. This year Ive been invited to speak at the Red Hat Forum Poland, presenting three sessions of which one is the opening technical keynote.&lt;br /&gt;&lt;br /&gt;Join me in &lt;a href="https://events.redhat.com/profile/form/index.cfm?PKformID=0x80865abcd" target="_blank"&gt;Warsaw, Poland on 5 Nov 2019&lt;/a&gt; for an amazing lineup of keynotes and sessions covering a wide range of topics; Infrastructure &amp;amp; Hybrid Cloud, IT Management &amp;amp; Automation, Cloud-Native Development, and Middleware &amp;amp; Agile Integration.&lt;br /&gt;&lt;br /&gt;I'll be talking in the keynote covering an overview of the Red Hat Technological News. After that I'll cover two breakout sessions on the following topics.&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;3 Pitfalls Everyone Ignores with Microservices&lt;/h3&gt;&lt;i&gt;The daily hype is all around you. Microservices are a necessary step along the path to integration for a digitally successful future for your organization. The choices you’ve got to make don’t preclude the daily work of developing amazing applications. From containers, cloud, multicloud, and beyond, microservices are the core infrastructure ensuring your organization's flexibility in the digital world. Join us for an hour of power, where real life developer experiences are used to highlight the three top lessons we're all learning as we transition our integration infrastructure into modern day microservices. &amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Time: 12:00 - 12:30 &lt;/i&gt;&lt;br /&gt;&lt;i&gt;Track: Middleware &amp;amp; Agile Integration &lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;3 Pitfalls Everyone Should Avoid with Hybrid Multicloud&lt;/h3&gt;&lt;i&gt;The daily hype is all around you. From cloud, hybrid cloud, to hybrid multicloud, you’re told this is the way to ensure a digital future for your business. These choices you’ve got to make don’t preclude the daily work of enhancing your customer's experience and agile delivery of those applications. Let us take you on a journey, looking closely at what hybrid multicloud means for your business, the decisions being made about delivering applications, and dealing with legacy applications, likely the most important resources to your business. Join us for an hour of power, where real customer experiences are used to highlight the three top lessons learned as they transitioned into hybrid multicloud environments.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;Time: 15:30 - 16:00 &lt;/i&gt;&lt;br /&gt;&lt;i&gt;Track: IT Infrastructure &amp;amp; Hybrid Cloud&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Look forward to seeing you there!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=y9Yhd0cNY98:OBqKDfcse-4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=y9Yhd0cNY98:OBqKDfcse-4:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=y9Yhd0cNY98:OBqKDfcse-4:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=y9Yhd0cNY98:OBqKDfcse-4:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=y9Yhd0cNY98:OBqKDfcse-4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=y9Yhd0cNY98:OBqKDfcse-4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=y9Yhd0cNY98:OBqKDfcse-4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=y9Yhd0cNY98:OBqKDfcse-4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=y9Yhd0cNY98:OBqKDfcse-4:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=y9Yhd0cNY98:OBqKDfcse-4:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=y9Yhd0cNY98:OBqKDfcse-4:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/y9Yhd0cNY98" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/cLdO0PD-g9E" height="1" width="1" alt=""/&gt;</content><summary>Every year in the fall Red Hat organizes events known as Red Hat Forums. These are smaller versions of the experience you can have at Red Hat Summit, without having to travel to either Boston or San Francisco (they switch coasts every year). To make it even easier they are organized all over the various regions of the world, from North America, Europe, and Asia. On occasion I'm asked to help out b...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-09-19T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/y9Yhd0cNY98/red-hat-forum-poland-keynote-and-journey-through-3-pitfalls.html</feedburner:origLink></entry><entry><title>Heuristic exceptions</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/4VUYcEASTGI/heuristic-exceptions.html" /><category term="feed_group_name_jbosstransactions" scheme="searchisko:content:tags" /><category term="feed_name_transactions" scheme="searchisko:content:tags" /><author><name>Ondra Chaloupka</name></author><id>searchisko:content:id:jbossorg_blog-heuristic_exceptions</id><updated>2019-09-18T18:04:23Z</updated><published>2019-09-18T17:56:00Z</published><content type="html">&lt;p&gt; A transaction is finished either with commit or rollback. But have you considered that the third transaction outcome is &lt;i&gt;&amp;lt;&amp;lt;unspecified&amp;gt;&amp;gt;&lt;/i&gt;? This third type of outcome may occur when the participant does not follow the coordinator's orders and makes a decision on the contrary. Then the outcome of the whole transaction could be inconsistent. Some participants could follow the coordinator guidelines to commit while the disobedient participant rolls-back. In such a case, the coordinator cannot report back to the application that "the work was successfully finished". From the perspective of the outside observer, the consistency is damaged. The coordinator itself cannot do much more. It followed the rules of the protocol but the participants disobeyed. Such transaction can only be marked with &lt;i&gt;&amp;lt;&amp;lt;unspecified&amp;gt;&amp;gt;&lt;/i&gt; result &amp;mdash which is known as heuristic outcome.&lt;br/&gt; The resolution of that outcome requires a third-party intervention. Saying differently somebody has to go and verify the state of data and make corrections. &lt;/p&gt; &lt;h2&gt;XA specification&lt;/h2&gt;&lt;p&gt; In scope of this article we talk about the &lt;a href="https://developer.jboss.org/wiki/TwoPhaseCommit2PC"&gt;two phase commit protocol&lt;/a&gt; and how the &lt;a href="http://pubs.opengroup.org/onlinepubs/009680699/toc.pdf"&gt;XA specification&lt;/a&gt; uses it.&lt;br/&gt; XA specification takes the two-phase commit, the abstractly defined consensus protocol, and carries it down to the ground of implementation. It defines rules for communication amongst parties, prescribes state model and assesses outcomes, exceptions etc.&lt;br/&gt; Where the 2PC talks about coordinator and participants the XA specification define a model where the coordinator is represented by a transaction manager (TM), the participant is modelled as the resource manager (RM) and the employer of them is an application program which talks to both of them.&lt;br/&gt; The transaction manager drives a global transaction which enlists resource managers as participants responsible for part of work. For the work managed by RM is used term transaction branch. The resource manager is represented normally by a Java code that implements the JTA API while it uses some internal mechanism to call the underlying data resource. The resource manager could be represented by a JDBC driver and then underlying resource could be the PostgreSQL database running in some distinct datacenter. &lt;/p&gt; &lt;h2&gt;JTA Specification&lt;/h2&gt;&lt;p&gt; The &lt;a href="https://jcp.org/aboutJava/communityprocess/mrel/jsr907/index3.html"&gt;Java Transaction API&lt;/a&gt; is a projection of XA specification to the language of Java. In general, it's a high-level API that strives to provide a comprehensible tool for handling transactional code based on the XA specification. &lt;/p&gt; &lt;h3&gt;Several purposes of JTA&lt;/h3&gt; &lt;p&gt; The JTA is meant to be used first by an application developer. In terms of XA specification, it would be the application program. Here we have the &lt;a href="https://github.com/eclipse-ee4j/jta-api/blob/master/src/main/java/javax/transaction/UserTransaction.java"&gt;UserTransaction&lt;/a&gt; interface. It gives the chance to &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt; the transaction. In terms of XA specification, it's a representation of the global transaction. In a newer version (from version 1.2) JTA defines the annotations like &lt;a href="https://github.com/eclipse-ee4j/jta-api/blob/master/src/main/java/javax/transaction/Transactional.java"&gt;Transactional&lt;/a&gt; That gives the user chance to control the application scope declaratively. As you can notice neither with the &lt;code&gt;UserTransaction&lt;/code&gt; nor with he &lt;code&gt;@Transactional&lt;/code&gt; annotation you can't do much more than to define where the transaction begins and where it ends. How to put a participant into the transaction? That limited capability is because developer is anticipated running the application in a managed environment. It could be for example &lt;a href="https://wildfly.org"&gt;Java EE application server&lt;/a&gt; or &lt;a href="https://quarkus.io"&gt;a different container&lt;/a&gt;. &lt;/p&gt;&lt;p&gt; The container is a second consumer of the JTA API. JTA gives the entry point to the world of transaction management. The container uses the interface &lt;a href="https://github.com/eclipse-ee4j/jta-api/blob/master/src/main/java/javax/transaction/TransactionManager.java#L23"&gt;TransactionManager&lt;/a&gt; &amp;mdash which provides ability of managing transaction scope but also gives access to the &lt;a href="https://github.com/eclipse-ee4j/jta-api/blob/master/src/main/java/javax/transaction/Transaction.java#L24"&gt;Transaction&lt;/a&gt; object itself. &lt;code&gt;Transaction&lt;/code&gt; is used to enlist the resource (the participant) to the global transaction. As the resource for enlistment is used the &lt;code&gt;XAResource&lt;/code&gt; interface in JTA. The &lt;code&gt;XAResource&lt;/code&gt; is managed by the transaction manager and is operated by the resource manager. Then container may arrange &lt;a href="https://github.com/eclipse-ee4j/jta-api/blob/master/src/main/java/javax/transaction/Synchronization.java"&gt;Synchronization&lt;/a&gt;s are callbacks called at the start and the end of the 2PC processing (used e.g. by &lt;a href="https://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html"&gt;JPA&lt;/a&gt;). &lt;/p&gt;&lt;p&gt; The third perspective where JTA participates in is communication with resource managers. The API defines the class &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.transaction.xa/javax/transaction/xa/XAResource.html"&gt;XAResource&lt;/a&gt; (represents a participant resource to be enlisted to the global transaction), &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.transaction.xa/javax/transaction/xa/XAException.html"&gt;XAException&lt;/a&gt; (represents an error state defined in the XA specification) and &lt;a href=""&gt;Xid&lt;/a&gt;. The Xid represents an identifer which is unique for each transaction branch and consists of two parts &amp;mdash; first an unique identifier of the global transaction and second an unique identifier of the resource manager. If you want to see how the transaction manager uses these classes to communicate with the resource manager take a look &lt;a href="https://docs.microsoft.com/en-us/sql/connect/jdbc/understanding-xa-transactions?redirectedfrom=MSDN&amp;view=sql-server-2017#example"&gt;at the example from documentation of SQL Server&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;&lt;i&gt;Note:&lt;/i&gt;If you study the JTA API by looking into the javadoc and strolling &lt;a href="https://docs.oracle.com/javase/10/docs/api/javax/transaction/package-summary.html"&gt;the package summary&lt;/a&gt; then you can wonder about some other classes which were not mentioned here. Part of the &lt;code&gt;javax.transaction&lt;/code&gt; package are interfaces used exclusively by JTS (transaction services running with ORB). That's mitigated by the fact the Java SE 11 removed support of ORB and those classes were removed from JDK as well.&lt;br/&gt; Plus the JTA classses are now (from Java SE 11) split over Java SE and Java EE bundles as the package &lt;code&gt;javax.transaction.xa&lt;/code&gt; is solely part of the Java SE while &lt;code&gt;javax.transaction&lt;/code&gt; belongs to the &lt;a href=""&gt;Jakarta EE API&lt;/a&gt;. &lt;/p&gt; &lt;h2&gt;Type of failures&lt;/h2&gt;&lt;p&gt; Now when we have talked the model let's see the failure states. First, it's needed to realize that a failure in the application does not mean failure from the protocol perspective. If there is trouble in the application code or a network is transiently not available such occurrences can lead to rollback. It's a failure from the perspective of the application but for the transaction manager the rollback is just another valid state to shift to.&lt;br/&gt; Even if the whole transaction manager crashes (e.g. the underlying JVM is killed) the system still should maintain data consistency and the transaction is recovered when the transaction manager (or rather &lt;a href="https://jbossts.blogspot.com/2018/01/narayana-periodic-recovery-of-xa.html"&gt;recovery manager&lt;/a&gt;) comes back to life. &lt;/p&gt;&lt;p&gt; What's the trouble for the protocol is an unexpected behaviour of the resource manager (or the backed resource). We can track basically two incident types. A heuristic outcome where the resource deliberately decides to process some action (which is different from transaction manager decision). Or a heuristic outcome caused by a bug in the code (either of the transaction manager or the resource manager). &lt;/p&gt;&lt;p&gt; Let's discuss some examples for these types.&lt;br/&gt; The deliberate decision could be a situation where the transaction manager calls the &lt;code&gt;prepare&lt;/code&gt; on the database. The database confirms the &lt;code&gt;prepare&lt;/code&gt; &amp;mdash; it promises to finish the transaction branch with commit. But unfortunately the transaction manager crashes and nobody comes to restart it for a long time. The database decides that it's pretty long time to hold resources and delaying other transactions to proceed. Thus it decides to commit the work. The processing in the database may continue from that time. But later the transaction manager is restarted and it tries to commit all other branches belonging to the global transaction (let's say e.g. a JMS broker). That resource responds with an error and the transaction manager decides to rollback the whole global transaction. Now it accesses the database with the request for the rollback. But the database already committed its branch &amp;mdash; the heuristic outcome just occurred. &lt;/p&gt;&lt;p&gt; An example for the bug in the code could be the PostgreSQL database driver. The driver was &lt;a href="https://github.com/pgjdbc/pgjdbc/pull/782"&gt;returning a wrong error code&lt;/a&gt; in case of intermittent connection failure. The XA specification defines that in such case the &lt;code&gt;XAException&lt;/code&gt; should be thrown and it has to carry one of the following error codes &amp;mdash; either the &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.transaction.xa/javax/transaction/xa/XAException.html#XAER_RMFAIL"&gt;XAException.XAER_RMFAIL&lt;/a&gt; or the &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.transaction.xa/javax/transaction/xa/XAException.html#XA_RETRY"&gt;XAException.XA_RETRY&lt;/a&gt;. But the JDBC driver was returning &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.transaction.xa/javax/transaction/xa/XAException.html#XAER_RMERR"&gt;XAException.XAER_RMERR&lt;/a&gt;. Such error code means that an irrecoverable error occurred. It makes the transaction manager think there is no way of automatic recovery and it switches the state of such transaction to heuristic immediately. &lt;/p&gt; &lt;h2&gt;Heuristic exceptions&lt;/h2&gt;&lt;p&gt; As the last part of this article we take a look on the heuristic outcomes of the transaction. The heuristics is represented with an exception being thrown. The exception reports the reason of the failure. It does so with error code or with type of class. &lt;/p&gt;&lt;p&gt; There are two main types of exception classes. First type is the &lt;code&gt;XAException&lt;/code&gt;. This one is part of the communication contract between the transaction manager and the resource manager. It should not happen for the application code to obtain this type of exception. But for sure you can observe the &lt;code&gt;XAException&lt;/code&gt; in the container log. It shows that there happened an error during transaction processing. &lt;/p&gt;&lt;p&gt; The second type is represented with multiple classes named &lt;a href="https://github.com/eclipse-ee4j/jta-api/blob/master/src/main/java/javax/transaction/HeuristicCommitException.java"&gt;Heuristic*Exception&lt;/a&gt;. These are exceptions that application code works with. They are thrown from the &lt;code&gt;UserTransaction&lt;/code&gt; methods and they are &lt;a href="https://howtodoinjava.com/java/exception-handling/checked-vs-unchecked-exceptions-in-java/"&gt;checked&lt;/a&gt;. &lt;/p&gt; &lt;h3&gt;Heuristic outcome with XAResource&lt;/h3&gt;&lt;p&gt; The &lt;code&gt;XAException&lt;/code&gt; reports reason of failure with the use of error codes. XA specification defines the meaning. It depends on the context in which it's used. For example the code &lt;code&gt;XAException.XA_RETRY&lt;/code&gt; could be used for reporting error from &lt;code&gt;commit&lt;/code&gt; with meaning to retry the commit action. But on the other hand it's not permitted to be used as an error code for the &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.transaction.xa/javax/transaction/xa/XAResource.html#commit(javax.transaction.xa.Xid,boolean)"&gt;one-phase commit&lt;/a&gt;. &lt;/p&gt;&lt;p&gt; Then where are those heuristic states? Let's check what could happen when the transaction manager calls the &lt;code&gt;XAResource&lt;/code&gt; calls of &lt;code&gt;prepare&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;rollback&lt;/code&gt;.&lt;br/&gt; If the &lt;code&gt;prepare&lt;/code&gt; is called then there is not many chances that heuristic occurs. At that time no promise from the resource is placed and the work can be easily roll-back or the worse timed-out. The only occurrence that can bring the system to the heuristic state is if the resource manager returns undefined code for this phase. But that is cause the most probably only by a bug in the implementation. Consult the XA specification which are those.&lt;br/&gt; The more interesting are the &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;rollback&lt;/code&gt; calls. The &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;rollback&lt;/code&gt; are (or could be) called after the &lt;code&gt;prepare&lt;/code&gt;. Heuristic exception means that the resource promised to commit (he acknowledge the prepare call) but it does not wait for transaction manager to command it for the next action and it finished the transaction branch on its own. The error codes are those with prefix &lt;code&gt;XA_HEUR*&lt;/code&gt;. The decision on its own does not mean an error for the protocol in all cases. &lt;/p&gt;&lt;p&gt; Let's talk about &lt;code&gt;rollback&lt;/code&gt; now. The global transaction was successfully prepared but the transaction manager decided at the end to roll-back it. It calls the &lt;code&gt;rollback&lt;/code&gt; to the &lt;code&gt;XAResource&lt;/code&gt;. The error &lt;code&gt;XAException.XA_HEURRB&lt;/code&gt; announces that the resource manager decided to roll-back the transaction branch prior it was asked for it by the transaction manager. But as the transaction manager decided to go for the roll-back too the heuristic outcome followed the decision.&lt;br/&gt; The &lt;code&gt;XAException.XA_HEURCOM&lt;/code&gt; means that all work represented by the transaction branch was committed (at time the &lt;code&gt;rollback&lt;/code&gt; is executed on the &lt;code&gt;XAResource&lt;/code&gt;). That's bad from the data consistency as some other transaction branches could be already rolled-back.&lt;br/&gt; To explain the meaning of the &lt;code&gt;XAException.XA_HEURMIX&lt;/code&gt; it's needed to mention that the transaction branch could consist of several "local transactions". For example, PostgreSQL JDBC driver starts a database transaction to insert data to the database. Later (still in the scope of the same global transaction) it decides to update the data. It starts another database transaction. The transaction manager is clever enough to join those two database transactions which belong to the same database resource (controlled by the same resource manager) under the one transaction branch. It's good as it could reduce the communication overhead. So the &lt;code&gt;XA_HEURMIX&lt;/code&gt; says that part of workload involved in the transaction branch was committed and the other part was rolled-back.&lt;br/&gt; The &lt;code&gt;XAException.XA_HEURHAZ&lt;/code&gt; says that the resource manager made a decision on its own but it's not capable to say what was the result of such an independent decision. &lt;/p&gt;&lt;p&gt; The most interesting part is the &lt;code&gt;commit&lt;/code&gt; call. First it uses the &lt;code&gt;XA_HEUR*&lt;/code&gt; exceptions in the same meaning as the &lt;code&gt;rollback&lt;/code&gt; call and all what is said in the previous paragraph pays for the &lt;code&gt;commit&lt;/code&gt; too. But up to that there are three new error codes. They do not contain word &lt;i&gt;HEUR&lt;/i&gt; but in result they mean it. Those are &lt;code&gt;XAER_RMERR&lt;/code&gt; which announces that an unspecified error happened during the currently executing &lt;code&gt;commit&lt;/code&gt; call. But instead of committing the resource manager had just rolled-back the transaction branch. That means we are in the same state as with the &lt;code&gt;XA_HEURRB&lt;/code&gt; The &lt;code&gt;XAER_NOTA&lt;/code&gt; says that resource manager does not know anything about this transaction branch. That means the resource manager lost the notion about it and it either commits it or rolled-back it or it may do an arbitrary one in the future. That means we are in the same state as with the &lt;code&gt;XA_HEURHAZ&lt;/code&gt;. The last one is the &lt;code&gt;XAER_PROTO&lt;/code&gt; which says that the &lt;code&gt;commit&lt;/code&gt; was called in a wrong context &amp;mdash; for example it was called without the &lt;code&gt;prepare&lt;/code&gt; being invoked before. This seems being similar to &lt;code&gt;XAER_NOTA&lt;/code&gt; and thus have the same impact as the &lt;code&gt;XA_HEURRB&lt;/code&gt;. &lt;/p&gt; &lt;h3&gt;Heuristic outcome with the "application exceptions"&lt;/h3&gt;&lt;p&gt; For the "application exceptions" it could be considered easier. The heuristic exceptions can be thrown only from the &lt;code&gt;commit&lt;/code&gt; call (&lt;a href="https://github.com/eclipse-ee4j/jta-api/blob/1.3.3/api/src/main/java/javax/transaction/UserTransaction.java#L43"&gt;see UserTransaction javadoc&lt;/a&gt;). The &lt;code&gt;UserTransaction&lt;/code&gt; gives chance to finish the transaction with &lt;code&gt;commit&lt;/code&gt; or &lt;code&gt;roll-back&lt;/code&gt;. The roll-back means that transaction branches should be aborted and all work discarded. When &lt;code&gt;UserTransaction.rollback()&lt;/code&gt; is called the resource manager had not promised succesful outcome yet. The time the &lt;code&gt;rollback&lt;/code&gt; is called is time when all transaction processing data is available only in memory. Thus resource manager has nothing onto decide differently. If there is some trouble the the other types of exceptions are thrown &amp;mdash; like &lt;code&gt;IllegalStateException&lt;/code&gt; or &lt;code&gt;SystemException&lt;/code&gt; (&lt;a href="https://github.com/eclipse-ee4j/jta-api/blob/1.3.3/api/src/main/java/javax/transaction/UserTransaction.java"&gt;see the UserTransaction javadoc&lt;/a&gt;).&lt;br/&gt; But with the &lt;code&gt;UserTransaction.commit&lt;/code&gt; it is different. This call means that two-phase commit protocol is to be started and &lt;code&gt;XAResource.prepare/commit/rollback&lt;/code&gt; calls are involved. Here the JTA uses the checked exceptions to inform the application to handle the trouble. The application checked exceptions are &lt;code&gt;RollbackException&lt;/code&gt;,&lt;code&gt;HeuristicMixedException&lt;/code&gt;,&lt;code&gt;HeuristicRollbackException&lt;/code&gt;. The &lt;code&gt;RollbackException&lt;/code&gt; is not a heuristic exception (at least by name) but still. That exception informs that even the code asked for commit all work (in all transaction branches) was undone by the rollback. The &lt;code&gt;HeuristicMixedException&lt;/code&gt; means that some transaction branches were committed and others were rolled-back. This is exception thrown for example if during the commit phase of 2PC. One of the &lt;code&gt;XAResource.commit&lt;/code&gt; calls returns &lt;code&gt;XAException.XA_HEURRB&lt;/code&gt; (aka it was rolled-back) while the others were succesfully committed.&lt;br/&gt; The &lt;code&gt;HeuristicRollbackException&lt;/code&gt; has the same final outcome from the global transaction perspective as the &lt;code&gt;RollbackException&lt;/code&gt;. It only emphasizes that the fact that the roll-back was deliberately chosen by all the resources prior to the &lt;code&gt;commit&lt;/code&gt; was executed by the transaction manager. In comparison, the &lt;code&gt;RollbackException&lt;/code&gt; means that the transaction manager was just trying to commit all resources but during the process of committing trouble occurred and all the work was rolled-back (all resources rolled-back). To be perfectly honest I'm not sure I can't see a real difference between these two. &lt;/p&gt;&lt;p&gt; We talked about all exceptions defined at the &lt;a href="https://github.com/eclipse-ee4j/jta-api/blob/1.3.3/api/src/main/java/javax/transaction/UserTransaction.java#L43"&gt;UserTransaction.commit&lt;/a&gt; definition so we are done. Oh wait, we are not!&lt;br/&gt;There is one more exception defined in the &lt;code&gt;javax.transaction&lt;/code&gt; package. It's the &lt;a href="https://github.com/eclipse-ee4j/jta-api/blob/master/src/main/java/javax/transaction/HeuristicCommitException.java"&gt;HeuristicCommitException&lt;/a&gt;. The &lt;code&gt;HeuristicCommitException&lt;/code&gt; is not defined at the &lt;code&gt;UserTransaction.commit&lt;/code&gt; as even all resources would idependently decide to commit the global transaction result is still just committed. Which is intended as &lt;code&gt;UserTransaction.commit&lt;/code&gt; is called. Then what is the purpose of it then?&lt;br/&gt; We need to &lt;a href="https://github.com/jbosstm/narayana/blob/5.9.8.Final/ArjunaJTA/jta/classes/com/arjuna/ats/internal/jta/transaction/arjunacore/jca/SubordinateTransaction.java#L62"&gt;look into the implementation&lt;/a&gt;. It's used at calls of commit and rollback at a subordinate transaction. The subordinate transaction is a transaction which is driven by a parent transaction. The parent transaction (named as top-level as well) manages the subordinate and decides the overall outcome.&lt;br/&gt; When the subordinate transaction is commanded it reports the outcome back to the top-level one. It's a similar relation as the &lt;code&gt;XAResource&lt;/code&gt; has to the global transaction. Because the subordinate transaction needs to report heuristic decisions back from the &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;rollback&lt;/code&gt; calls the &lt;code&gt;HeuristicCommitException&lt;/code&gt; serves for cases when subordinate transaction decided to commit prior the top-level transaction commanded for a final action. &lt;/p&gt;&lt;p&gt;&lt;i&gt;NOTE:&lt;/i&gt; Don't interchange the subordinate transaction for the nested transaction. If the nested transaction is aborted the upper transaction can continue in processing and it can finish with commit at the end (but if the top-level transaction rolls-back the nested transaction has to roll-back as well).&lt;br/&gt; The subordinate transaction is a composite part of the top-level transaction. If the subordinate transaction aborts the top-level one aborts as well. &lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt;&lt;p&gt; That's all. Hopefully, you understand a bit more on the meaning of the heuristic outcomes for the XA and JTA specifications. And for sure you won't be writing code like &lt;pre&gt;&lt;code class="java"&gt;try {&lt;br /&gt; UserTransaction.begin();&lt;br /&gt; ...&lt;br /&gt; UserTransaction.commit();&lt;br /&gt;} catch (Throwable t) {&lt;br /&gt; // some strange error happened so we print it to the log&lt;br /&gt; t.printStackTrace();&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/4VUYcEASTGI" height="1" width="1" alt=""/&gt;</content><summary>A transaction is finished either with commit or rollback. But have you considered that the third transaction outcome is &lt;&gt;? This third type of outcome may occur when the participant does not follow the coordinator's orders and makes a decision on the contrary. Then the outcome of the whole transaction could be inconsistent. Some participants could follow the coordinator guidelines to commit while ...</summary><dc:creator>Ondra Chaloupka</dc:creator><dc:date>2019-09-18T17:56:00Z</dc:date><feedburner:origLink>http://jbossts.blogspot.com/2019/09/heuristic-exceptions.html</feedburner:origLink></entry><entry><title>Etymology of Kogito</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/QOVF98sD8Ug/etymology-of-kogito.html" /><category term="feed_group_name_jbpm" scheme="searchisko:content:tags" /><category term="feed_name_kverlaen" scheme="searchisko:content:tags" /><category term="kogito" scheme="searchisko:content:tags" /><author><name>Kris Verlaenen</name></author><id>searchisko:content:id:jbossorg_blog-etymology_of_kogito</id><updated>2019-09-18T12:08:30Z</updated><published>2019-09-18T11:58:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: justify;"&gt;After writing up &lt;a href="http://kverlaen.blogspot.com/2019/09/an-intro-to-kogito.html"&gt;an introduction to our Kogito effort&lt;/a&gt;, it seems people are interested in hearing a little but more about the name, where it comes from, what the logo means, and (what seems to be the most important question) how to pronounce Kogito?&amp;nbsp; Yes, there even was a JIRA issue [&lt;a href="https://issues.jboss.org/browse/KOGITO-284"&gt;KOGITO-284&lt;/a&gt;] opened to address this issue!&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;First, the name Kogito itself comes from:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;"Cogito, ergo sum"&lt;/i&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;a Latin philosophical proposition by René Descartes usually translated into English as "I think, therefore I am" [&lt;a href="https://en.wikipedia.org/wiki/Cogito,_ergo_sum"&gt;Wikipedia&lt;/a&gt;].&amp;nbsp; So Kogito simply means "I think", and refers to how users are encoding business knowledge using various formats (processes, rules, constraints, etc.).&amp;nbsp; The 'c' was replaced with a 'k' as a reference to Kubernetes, our target cloud platform, and Kie where the k stands for knowledge. &lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;i&gt;"Kogito, ergo automate"&lt;/i&gt; therefore means, &lt;i&gt;"I think, therefore I automate"&lt;/i&gt; and refers to the use of business automation to encode business knowledge.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/--yPTtXwsKCI/XYC4s7x_VyI/AAAAAAAAFIk/y8S1f6A4mv8uT_7qwIyX8j6a1l-6DKnbgCLcBGAsYHQ/s1600/kogito_logo_rgb_color_horizontal_default_450px.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="128" data-original-width="450" height="91" src="https://1.bp.blogspot.com/--yPTtXwsKCI/XYC4s7x_VyI/AAAAAAAAFIk/y8S1f6A4mv8uT_7qwIyX8j6a1l-6DKnbgCLcBGAsYHQ/s320/kogito_logo_rgb_color_horizontal_default_450px.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Our logo is a reference to &lt;b&gt;Odin&lt;/b&gt;, the Norse God that gave up an eye for wisdom&lt;a href="https://en.wikipedia.org/wiki/Odin"&gt; [Wikipedia]&lt;/a&gt;.&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;div style="text-align: justify;"&gt;&lt;i&gt;“According to mythology, Odin ventured to the mystical Well of Urd at the base of the world-tree that holds the cosmos together. The well was guarded by Mimir, a shadowy being who becomes all knowing by drinking the magical waters. Odin asked for a drink and Mimir replied that Odin must sacrifice an eye for a drink. Odin gouged out his own eye, dropped it into the well, and was allowed to drink from the waters of cosmic knowledge.”&lt;/i&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div style="text-align: justify;"&gt;Finally, how do I pronounce Kogito?&amp;nbsp; Since it comes from the Latin phrase &lt;i&gt;"Cogito, ergo sum"&lt;/i&gt;, the obvious first question could be, how do I pronounce that?&amp;nbsp; As it turns out, not an easy question to answer, but in the end the Italians in our team proclaimed this to be the only correct pronunciation:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;div style="text-align: justify;"&gt;&lt;span class="st"&gt;[ˈkoː.d͡ʒi.to]&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div style="text-align: justify;"&gt;so that's with the emphasis on the first syllable, and the 'g' pronounced as 'dji', or (if you're not skilled in phonetic language at all like me ;)) just listen to the video below:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;iframe width="320" height="266" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/8jhb2hm6lu4/0.jpg" src="https://www.youtube.com/embed/8jhb2hm6lu4?feature=player_embedded" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Some good news though, because it seems no mortal person is able to consistently pronounce it this way, other pronunciations are completely fine too!&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/QOVF98sD8Ug" height="1" width="1" alt=""/&gt;</content><summary>After writing up an introduction to our Kogito effort, it seems people are interested in hearing a little but more about the name, where it comes from, what the logo means, and (what seems to be the most important question) how to pronounce Kogito?  Yes, there even was a JIRA issue [KOGITO-284] opened to address this issue! First, the name Kogito itself comes from: "Cogito, ergo sum" a Latin philo...</summary><dc:creator>Kris Verlaenen</dc:creator><dc:date>2019-09-18T11:58:00Z</dc:date><feedburner:origLink>http://kverlaen.blogspot.com/2019/09/etymology-of-kogito.html</feedburner:origLink></entry><entry><title>Easy-to-use tools are key to CI/CD success says 2019 State of DevOps Report</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/eIKCQhceT_Y/" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Operating System" scheme="searchisko:content:tags" /><category term="tools" scheme="searchisko:content:tags" /><author><name>Editorial Team</name></author><id>searchisko:content:id:jbossorg_blog-easy_to_use_tools_are_key_to_ci_cd_success_says_2019_state_of_devops_report</id><updated>2019-09-18T07:00:24Z</updated><published>2019-09-18T07:00:24Z</published><content type="html">&lt;p&gt;The most effective strategies for scaling DevOps and fostering productivity include easy-to-use tools and solutions that create community, according to the &lt;a href="https://cloud.google.com/devops/state-of-devops/"&gt;2019 Accelerate State of DevOps Report&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This year’s report, written by Dr. Nicole Forsgren, Dr. Dustin Smith, Jez Humble, and Jessie Frazelle, represents six years of research and data from more than 31,000 professionals and aims to better understand how the technical and cultural practices associated with DevOps affect team and organizational performance. It also explores ways to help improve performance and productivity and even reduce burnout.&lt;/p&gt; &lt;h3&gt;Demographics&lt;/h3&gt; &lt;p&gt;We’ll look at a few highlights of the report, but first it’s worth noting the demographic makeup of survey respondents, most of whom work within the tech industry (38%), followed by financial services (12%), retail/consumer (9%), and other.&lt;/p&gt; &lt;p&gt;“Gender breakouts from this year’s survey responses remain consistent with 83% male in 2019 (vs 83% last year), 10% female (vs 12% last year), and &amp;#60;1% non-binary (vs &amp;#60;1% last year),” the report states. However, this year’s respondents said that only 16% of their teams include women, which is down from 25% reported last year.&lt;/p&gt; &lt;p&gt;The number of respondents who work as part of specific DevOps/SRE teams has stayed at approximately 27% for the past three years; 30% are part of Development or Engineering. Additionally, the breakdown of operating systems used has been fairly consistent:&lt;/p&gt; &lt;div id="attachment_629117" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-629117" class=" size-large wp-image-629117 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Operating-systems-1024x464.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Operating-systems-1024x464.png" alt="DevOps OS" width="640" height="290" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Operating-systems-1024x464.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Operating-systems-300x136.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Operating-systems-768x348.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-629117" class="wp-caption-text"&gt;Source: 2019 Accelerate State of DevOps&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Improving performance&lt;/h3&gt; &lt;p&gt;The report notes that many organizations are looking for a specific set of best practices for adopting DevOps, but every organization differs in terms of technology, culture, processes, and goals. Thus, taking a more general, or holistic, approach—through which you first understand and describe your existing processes and desired outcomes and then empower teams to accomplish those goals—can be most effective.&lt;/p&gt; &lt;p&gt;&lt;i&gt;“Remember that our goal is improving our ability to deliver software, which we accomplish through technical practices in delivery and deployment we call continuous delivery (CD). CD reduces the risk and cost of performing releases. Continuous delivery for the sake of continuous delivery is not enough if you want your organization to succeed, however. It must be done with an eye to organizational goals such as profitability, productivity, and customer satisfaction.”  &lt;/i&gt;— &lt;a href="https://cloud.google.com/devops/state-of-devops/"&gt;2019 Accelerate State of DevOps Report&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This year’s report aims to help organizations drive improvement in both performance and productivity using two research models, shown below, and it offers guidance depending on what you want to improve.&lt;/p&gt; &lt;div id="attachment_629107" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-629107" class=" size-large wp-image-629107 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/DevOps-models-1024x658.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/DevOps-models-1024x658.png" alt="DevOps models" width="640" height="411" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/DevOps-models-1024x658.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/DevOps-models-300x193.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/DevOps-models-768x494.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/DevOps-models.png 1282w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-629107" class="wp-caption-text"&gt;Source: 2019 Accelerate State of DevOps&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Fostering productivity&lt;/h3&gt; &lt;p&gt;As defined in the report, “productivity is the ability to get complex, time-consuming tasks completed with minimal distractions and interruptions.” Productive people complete their work efficiently, giving them more time to do other things.&lt;/p&gt; &lt;div id="attachment_629097" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-629097" class=" size-large wp-image-629097 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/productivity-1024x499.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/productivity-1024x499.png" alt="DevOps productiivty" width="640" height="312" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/productivity-1024x499.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/productivity-300x146.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/productivity-768x375.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-629097" class="wp-caption-text"&gt;Source: 2019 Accelerate State of DevOps&lt;/p&gt;&lt;/div&gt; &lt;p&gt;One way organizations can help foster productivity is through the use of appropriate tooling. This year’s findings showed that the highest performing engineers are one and a half times more likely to have &lt;a href="https://thenewstack.io/one-toolchain-to-manage-all-the-development-a-ci-cd-vendor-obsession/"&gt;easy-to-use tools&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The following image shows a breakdown of performance relating to use of open source, proprietary, and commercial off-the-shelf (COTS) software.&lt;/p&gt; &lt;div id="attachment_629087" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-629087" class=" size-large wp-image-629087 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Tool-use-799x1024.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Tool-use-799x1024.png" alt="DevOps tools" width="640" height="820" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Tool-use-799x1024.png 799w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Tool-use-234x300.png 234w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Tool-use-768x984.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/Tool-use.png 1074w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-629087" class="wp-caption-text"&gt;Source: 2019 Accelerate State of DevOps&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This section of the report focused mainly on tools used in deploying software through the CI/CD and test automation process and found that the following factors foster productivity:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;How easy it is to use the toolchain (including straightforward and easy interactions and operation).&lt;/li&gt; &lt;li&gt;How useful the toolchain is in accomplishing job-related goals.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The report found that elite performers more frequently automate and integrate tools into their toolchains on almost all dimensions.&lt;/p&gt; &lt;h3&gt;More resources&lt;/h3&gt; &lt;p&gt;You can &lt;a href="https://developers.redhat.com/blog/category/devops/"&gt;learn more about DevOps&lt;/a&gt; here on the Red Hat Developer blog.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/auth/realms/rhd/protocol/openid-connect/registrations?client_id=web&amp;#38;redirect_uri=https%3A%2F%2Fdevelopers.redhat.com%2F%2Fconfirmation&amp;#38;state=941f1e8f-a7ae-43d8-a015-14459ac49810&amp;#38;nonce=fbf3f6b1-54f3-4119-adbd-5f97711efd98&amp;#38;response_mode=fragment&amp;#38;response_type=code"&gt;&lt;b&gt;Join Red Hat Developer &lt;/b&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F18%2Feasy-to-use-tools-are-key-to-ci-cd-success-says-2019-state-of-devops-report%2F&amp;#38;linkname=Easy-to-use%20tools%20are%20key%20to%20CI%2FCD%20success%20says%202019%20State%20of%20DevOps%20Report" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F18%2Feasy-to-use-tools-are-key-to-ci-cd-success-says-2019-state-of-devops-report%2F&amp;#38;linkname=Easy-to-use%20tools%20are%20key%20to%20CI%2FCD%20success%20says%202019%20State%20of%20DevOps%20Report" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F18%2Feasy-to-use-tools-are-key-to-ci-cd-success-says-2019-state-of-devops-report%2F&amp;#38;linkname=Easy-to-use%20tools%20are%20key%20to%20CI%2FCD%20success%20says%202019%20State%20of%20DevOps%20Report" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F18%2Feasy-to-use-tools-are-key-to-ci-cd-success-says-2019-state-of-devops-report%2F&amp;#38;linkname=Easy-to-use%20tools%20are%20key%20to%20CI%2FCD%20success%20says%202019%20State%20of%20DevOps%20Report" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F18%2Feasy-to-use-tools-are-key-to-ci-cd-success-says-2019-state-of-devops-report%2F&amp;#38;linkname=Easy-to-use%20tools%20are%20key%20to%20CI%2FCD%20success%20says%202019%20State%20of%20DevOps%20Report" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F18%2Feasy-to-use-tools-are-key-to-ci-cd-success-says-2019-state-of-devops-report%2F&amp;#38;linkname=Easy-to-use%20tools%20are%20key%20to%20CI%2FCD%20success%20says%202019%20State%20of%20DevOps%20Report" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F18%2Feasy-to-use-tools-are-key-to-ci-cd-success-says-2019-state-of-devops-report%2F&amp;#38;linkname=Easy-to-use%20tools%20are%20key%20to%20CI%2FCD%20success%20says%202019%20State%20of%20DevOps%20Report" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F18%2Feasy-to-use-tools-are-key-to-ci-cd-success-says-2019-state-of-devops-report%2F&amp;#038;title=Easy-to-use%20tools%20are%20key%20to%20CI%2FCD%20success%20says%202019%20State%20of%20DevOps%20Report" data-a2a-url="https://developers.redhat.com/blog/2019/09/18/easy-to-use-tools-are-key-to-ci-cd-success-says-2019-state-of-devops-report/" data-a2a-title="Easy-to-use tools are key to CI/CD success says 2019 State of DevOps Report"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/18/easy-to-use-tools-are-key-to-ci-cd-success-says-2019-state-of-devops-report/"&gt;Easy-to-use tools are key to CI/CD success says 2019 State of DevOps Report&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/eIKCQhceT_Y" height="1" width="1" alt=""/&gt;</content><summary>The most effective strategies for scaling DevOps and fostering productivity include easy-to-use tools and solutions that create community, according to the 2019 Accelerate State of DevOps Report. This year’s report, written by Dr. Nicole Forsgren, Dr. Dustin Smith, Jez Humble, and Jessie Frazelle, represents six years of research and data from more than 31,000 professionals and aims to better unde...</summary><dc:creator>Editorial Team</dc:creator><dc:date>2019-09-18T07:00:24Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/18/easy-to-use-tools-are-key-to-ci-cd-success-says-2019-state-of-devops-report/</feedburner:origLink></entry><entry><title>Eclipse Che, Kubernetes-native IDE, version 7 now available</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/opHj6yQUKrU/" /><category term="Eclipse Che" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="Red Hat CodeReady Workspaces" scheme="searchisko:content:tags" /><author><name>Stevan LeMeur</name></author><id>searchisko:content:id:jbossorg_blog-eclipse_che_kubernetes_native_ide_version_7_now_available</id><updated>2019-09-17T15:03:09Z</updated><published>2019-09-17T15:03:09Z</published><content type="html">&lt;p&gt;Today, the Eclipse Foundation announced the release of &lt;a href="https://www.eclipse.org/che/"&gt;Eclipse Che 7&lt;/a&gt;, the Kubernetes-native IDE, enabling developer teams to code, build, test, and run cloud-native applications. We are excited by this announcement and the new capabilities that this version offers the community and developers building containerized applications.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter size-large wp-image-629437 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/eclipse-che-7-ide-1024x539.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/eclipse-che-7-ide-1024x539.png" alt="Eclipse Che 7" width="640" height="337" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/eclipse-che-7-ide-1024x539.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/eclipse-che-7-ide-300x158.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/eclipse-che-7-ide-768x404.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;span id="more-629427"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Eclipse Che 7 used to build a &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; cloud-native application.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This release introduces:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Kubernetes-based developer workspaces: &lt;/b&gt;Fully containerized developer workspaces allowing to bring your application runtime back easily in your dev environment.&lt;/li&gt; &lt;li&gt;&lt;b&gt;New Editor&lt;/b&gt;&lt;strong&gt;:&lt;/strong&gt; Based on Eclipse Theia, the new default web-based editor provides a VSCode-like experience in the browser.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Devfile—developer environments as code: &lt;/b&gt;Configure a devfile for your project and get reproducible and disposable portable developer environments.&lt;/li&gt; &lt;li&gt;&lt;b&gt;New plugins and extensibility model&lt;/b&gt;: Get the plugins you need for your project with VSCode extension compatibility. Swap IDEs with custom ones such as Jupyter, &lt;a href="https://www.dirigible.io/"&gt;Eclipse Dirigible&lt;/a&gt;, or others.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Kubernetes and Red Hat OpenShift support:&lt;/b&gt; Deploy on any public cloud or on-premise Kubernetes.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Easy to monitor and administrate: &lt;/b&gt;Prometheus and Grafana dashboards to easily control your Eclipse Che deployment.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Chectl&lt;/b&gt;: New command-line tool to manage Eclipse Che.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can learn more about &lt;a href="https://medium.com/p/40ae07120b38"&gt;Eclipse Che 7 release on the following release note blog post&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Try Eclipse Che 7, on &lt;/b&gt;&lt;a href="https://che.openshift.io/"&gt;&lt;b&gt;Hosted Che at che.openshift.io&lt;/b&gt;&lt;/a&gt;&lt;b&gt; and browse the &lt;/b&gt;&lt;a href="https://www.eclipse.org/che/getting-started/cloud/"&gt;&lt;b&gt;samples already available&lt;/b&gt;&lt;/a&gt;&lt;b&gt;.&lt;/b&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Kube-app from 0 to hero&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Eclipse Che 7 makes &lt;a href="https://developers.redhat.com/developer-tools/kubernetes"&gt;Kubernetes&lt;/a&gt; development accessible for developer teams, providing one-click developer workspaces and eliminating local environment configuration for your entire team. &lt;b&gt;Che brings your Kubernetes application into your development environment&lt;/b&gt;, allowing you to code, build, test and run applications exactly as they run on production, providing developers with an improved inner-loop development workflow.&lt;/p&gt; &lt;h2&gt;Centrally hosted Kubernetes workspaces for teams&lt;/h2&gt; &lt;p&gt;&lt;b&gt;Eclipse Che can be deployed on public K8S clusters or installed on-premise, behind your firewall&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;Che allows managers to establish the configuration of their team’s development environments, define technology stacks and IDE tooling, and provide their team with resources that surpass the limits of a laptop, all while securing access to source code.&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Eclipse Che Operator&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Eclipse Che 7 provides an Operator that is available to manage Eclipse Che on any K8S cluster with the OLM installed. It is available &lt;a href="https://operatorhub.io/operator/eclipse-che"&gt;today on OperatorHub.IO. If you are already using Red Hat OpenShift 4.x, the installation can smoothly proceed directly from the OpenShift Console.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;To learn more on installation Eclipse Che on Red Hat OpenShift:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.eclipse.org/che/docs/che-7/installing-che-on-openshift-3-using-the-operator/"&gt;Installation guide for OpenShift 3.11&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.eclipse.org/che/docs/che-7/installing-che-on-openshift-4-from-operatorhub/"&gt;Installation guide for OpenShift 4.x&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Natively integrated with Red Hat OpenShift&lt;/h2&gt; &lt;p&gt;Running on &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;, Eclipse Che allows developers to code on their applications exactly the way as they are running on production. Eclipse Che 7 is compatible with OpenShift starting at version 3.11.&lt;/p&gt; &lt;p&gt;The integration in the future is going to become more and more seamless, allowing developers to benefit from on-demand developer environments for their applications directly from the OpenShift Developer Console (coming with OpenShift 4.2).&lt;/p&gt; &lt;h2&gt;Eclipse Che 7 and Red Hat CodeReady Workspaces 2.0&lt;/h2&gt; &lt;p&gt;Red Hat CodeReady Workspaces, is the supported version of Eclipse Che for OpenShift. Version 7 of Eclipse Che will be integrated into CodeReady Workspaces 2.0, providing the latest open source Kubernetes-native IDE to build cloud-native applications on OpenShift for OpenShift.&lt;/p&gt; &lt;h3&gt;Learn more&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Eclipse Che: &lt;a href="https://www.eclipse.org/che"&gt;https://www.eclipse.org/che&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Red Hat CodeReady Workspaces: &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;https://developers.redhat.com/products/codeready-workspaces/overview&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Che hosted by Red Hat Developer: &lt;a href="https://che.openshift.io"&gt;https://che.openshift.io&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Feclipse-che-kubernetes-native-ide-version-7-now-available%2F&amp;#38;linkname=Eclipse%20Che%2C%20Kubernetes-native%20IDE%2C%20version%207%20now%20available" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Feclipse-che-kubernetes-native-ide-version-7-now-available%2F&amp;#38;linkname=Eclipse%20Che%2C%20Kubernetes-native%20IDE%2C%20version%207%20now%20available" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Feclipse-che-kubernetes-native-ide-version-7-now-available%2F&amp;#38;linkname=Eclipse%20Che%2C%20Kubernetes-native%20IDE%2C%20version%207%20now%20available" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Feclipse-che-kubernetes-native-ide-version-7-now-available%2F&amp;#38;linkname=Eclipse%20Che%2C%20Kubernetes-native%20IDE%2C%20version%207%20now%20available" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Feclipse-che-kubernetes-native-ide-version-7-now-available%2F&amp;#38;linkname=Eclipse%20Che%2C%20Kubernetes-native%20IDE%2C%20version%207%20now%20available" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Feclipse-che-kubernetes-native-ide-version-7-now-available%2F&amp;#38;linkname=Eclipse%20Che%2C%20Kubernetes-native%20IDE%2C%20version%207%20now%20available" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Feclipse-che-kubernetes-native-ide-version-7-now-available%2F&amp;#38;linkname=Eclipse%20Che%2C%20Kubernetes-native%20IDE%2C%20version%207%20now%20available" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Feclipse-che-kubernetes-native-ide-version-7-now-available%2F&amp;#038;title=Eclipse%20Che%2C%20Kubernetes-native%20IDE%2C%20version%207%20now%20available" data-a2a-url="https://developers.redhat.com/blog/2019/09/17/eclipse-che-kubernetes-native-ide-version-7-now-available/" data-a2a-title="Eclipse Che, Kubernetes-native IDE, version 7 now available"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/17/eclipse-che-kubernetes-native-ide-version-7-now-available/"&gt;Eclipse Che, Kubernetes-native IDE, version 7 now available&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/opHj6yQUKrU" height="1" width="1" alt=""/&gt;</content><summary>Today, the Eclipse Foundation announced the release of Eclipse Che 7, the Kubernetes-native IDE, enabling developer teams to code, build, test, and run cloud-native applications. We are excited by this announcement and the new capabilities that this version offers the community and developers building containerized applications. Eclipse Che 7 used to build a Quarkus cloud-native application. This ...</summary><dc:creator>Stevan LeMeur</dc:creator><dc:date>2019-09-17T15:03:09Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/17/eclipse-che-kubernetes-native-ide-version-7-now-available/</feedburner:origLink></entry><entry><title>A look at development environments with specific tooling for Apache Camel Language</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0o7uHTIROcE/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="Eclipse Che" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="ide" scheme="searchisko:content:tags" /><category term="language servers" scheme="searchisko:content:tags" /><category term="Red Hat CodeReady Studio" scheme="searchisko:content:tags" /><category term="Red Hat CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="Red Hat Integration" scheme="searchisko:content:tags" /><author><name>Aurélien Pupier</name></author><id>searchisko:content:id:jbossorg_blog-a_look_at_development_environments_with_specific_tooling_for_apache_camel_language</id><updated>2019-09-17T07:00:27Z</updated><published>2019-09-17T07:00:27Z</published><content type="html">&lt;p&gt;A growing set of editors and IDEs provides specific tooling for development of applications based on &lt;a href="https://camel.apache.org/"&gt;Apache Camel&lt;/a&gt;. Historically, there was only Eclipse Fuse Tooling, which was based on the Eclipse Desktop IDE. Then, an &lt;a href="https://plugins.jetbrains.com/plugin/9371-apache-camel-idea-plugin"&gt;IntelliJ plugin&lt;/a&gt; was created. Both of these tools are tightly coupled to the specific IDE APIs. Consequently, they have the drawback of not easily sharing the development effort.&lt;/p&gt; &lt;h2&gt;Supported editors and IDEs&lt;/h2&gt; &lt;p&gt;Thanks to &lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt;, with a &lt;a href="https://github.com/camel-tooling/camel-language-server"&gt;core server&lt;/a&gt; and several configurations or small client development, Apache Camel Language can now be enjoyed on a growing set of environments:&lt;/p&gt; &lt;p&gt;&lt;span id="more-618377"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href="https://github.com/camel-tooling/camel-lsp-client-che"&gt;Eclipse Che extension&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;It is also available on che.openshift.io and &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;Code Ready Workspaces&lt;/a&gt; (currently only for xml on CRW 1.x, full support coming with CRW 2.x).&lt;br /&gt; &lt;img class=" aligncenter size-full wp-image-627567 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Webp.net-gifmaker-1-1024x484.gif" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/Webp.net-gifmaker-1.gif" alt="Camel XML completion in Che 7" width="1414" height="669" /&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-apache-camel"&gt;VS Code &lt;/a&gt;&lt;/h3&gt; &lt;p&gt;Here is a &lt;a href="https://www.youtube.com/watch?v=-gkO4hLM5Yc&amp;#38;list=PLU-T8l-XOWONfIGaEp53PJht-RQce0JFa&amp;#38;index=3"&gt;video&lt;/a&gt; taking a tour of the main features.&lt;img class=" aligncenter size-full wp-image-627507 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/completion-1024x341.gif" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/completion.gif" alt="completion Camel XML" width="1086" height="362" /&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href="https://marketplace.eclipse.org/content/language-support-apache-camel"&gt;Eclipse Desktop&lt;/a&gt; plugin&lt;/h3&gt; &lt;p&gt;Note that it is embedded by default in &lt;a href="https://tools.jboss.org/features/fusetools.html"&gt;Fuse Tooling&lt;/a&gt;, &lt;a href="https://tools.jboss.org/"&gt;JBoss Tools&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/products/codeready-studio/overview"&gt;Code Ready Studio. &lt;/a&gt;This &lt;a href="https://www.youtube.com/watch?v=cf6Z-sR05gA&amp;#38;list=PLU-T8l-XOWOPh0z14IXs0Oa3OJpwSLHqr&amp;#38;index=6&amp;#38;t=0s"&gt;video&lt;/a&gt; provides deeper insight.&lt;br /&gt; &lt;img class=" aligncenter size-full wp-image-627547 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/completionComponent-1024x512.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/completionComponent-1024x512.png" alt="completion Camel XMl in Eclipse Desktop" width="640" height="320" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/completionComponent-1024x512.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/completionComponent-300x150.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/completionComponent-768x384.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/completionComponent.png 1171w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href="https://atom.io/packages/camel-lsp-client-atom"&gt;Atom&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;This &lt;a href="https://www.youtube.com/watch?v=alR85m-p0oY&amp;#38;list=PLU-T8l-XOWONfIGaEp53PJht-RQce0JFa&amp;#38;index=5&amp;#38;t=0s"&gt;video&lt;/a&gt; explains how to install and start using it.&lt;br /&gt; &lt;img class=" aligncenter size-full wp-image-627527 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/completionXml.gif" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/completionXml.gif" alt="completion Camel Xml in Atom Editor" width="670" height="688" /&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href="https://github.com/camel-tooling/camel-lsp-client-sublime"&gt;Sublime&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-627537 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/sublimeCompletion.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/sublimeCompletion.png" alt="Camel XML completion Sublime Text" width="955" height="987" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/sublimeCompletion.png 955w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/sublimeCompletion-290x300.png 290w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/sublimeCompletion-768x794.png 768w" sizes="(max-width: 955px) 100vw, 955px" /&gt;&lt;/p&gt; &lt;h2&gt;Other editors and IDEs&lt;/h2&gt; &lt;p&gt;In theory, it is possible to use the Camel LSP for several other editors and IDEs with specific configuration. I encourage users of these others environments to test how it goes with Camel LSP and then share steps for using them. You can find a list of potential clients &lt;a href="https://langserver.org/#implementations-client"&gt;here&lt;/a&gt; (I recommend searching for your beloved IDE as not all are listed). Some pointers are provided for &lt;a href="https://github.com/camel-tooling/camel-lsp-client-spacevim/issues/1"&gt;Vim&lt;/a&gt; or &lt;a href="https://github.com/camel-tooling/camel-lsp-client-emacs/issues"&gt;Emacs&lt;/a&gt;. If there is no specific Git repository for your IDE in the &lt;a href="https://github.com/camel-tooling"&gt;Camel tooling organization&lt;/a&gt;, you can make a request or provide feedback on the &lt;a href="https://github.com/camel-tooling/camel-language-server"&gt;Camel Language Server Git issue repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fa-look-at-development-environments-with-specific-tooling-for-apache-camel-language%2F&amp;#38;linkname=A%20look%20at%20development%20environments%20with%20specific%20tooling%20for%20Apache%20Camel%20Language" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fa-look-at-development-environments-with-specific-tooling-for-apache-camel-language%2F&amp;#38;linkname=A%20look%20at%20development%20environments%20with%20specific%20tooling%20for%20Apache%20Camel%20Language" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fa-look-at-development-environments-with-specific-tooling-for-apache-camel-language%2F&amp;#38;linkname=A%20look%20at%20development%20environments%20with%20specific%20tooling%20for%20Apache%20Camel%20Language" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fa-look-at-development-environments-with-specific-tooling-for-apache-camel-language%2F&amp;#38;linkname=A%20look%20at%20development%20environments%20with%20specific%20tooling%20for%20Apache%20Camel%20Language" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fa-look-at-development-environments-with-specific-tooling-for-apache-camel-language%2F&amp;#38;linkname=A%20look%20at%20development%20environments%20with%20specific%20tooling%20for%20Apache%20Camel%20Language" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fa-look-at-development-environments-with-specific-tooling-for-apache-camel-language%2F&amp;#38;linkname=A%20look%20at%20development%20environments%20with%20specific%20tooling%20for%20Apache%20Camel%20Language" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fa-look-at-development-environments-with-specific-tooling-for-apache-camel-language%2F&amp;#38;linkname=A%20look%20at%20development%20environments%20with%20specific%20tooling%20for%20Apache%20Camel%20Language" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fa-look-at-development-environments-with-specific-tooling-for-apache-camel-language%2F&amp;#038;title=A%20look%20at%20development%20environments%20with%20specific%20tooling%20for%20Apache%20Camel%20Language" data-a2a-url="https://developers.redhat.com/blog/2019/09/17/a-look-at-development-environments-with-specific-tooling-for-apache-camel-language/" data-a2a-title="A look at development environments with specific tooling for Apache Camel Language"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/17/a-look-at-development-environments-with-specific-tooling-for-apache-camel-language/"&gt;A look at development environments with specific tooling for Apache Camel Language&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0o7uHTIROcE" height="1" width="1" alt=""/&gt;</content><summary>A growing set of editors and IDEs provides specific tooling for development of applications based on Apache Camel. Historically, there was only Eclipse Fuse Tooling, which was based on the Eclipse Desktop IDE. Then, an IntelliJ plugin was created. Both of these tools are tightly coupled to the specific IDE APIs. Consequently, they have the drawback of not easily sharing the development effort. Sup...</summary><dc:creator>Aurélien Pupier</dc:creator><dc:date>2019-09-17T07:00:27Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/17/a-look-at-development-environments-with-specific-tooling-for-apache-camel-language/</feedburner:origLink></entry><entry><title>@Autowire MicroProfile into Spring with Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/MQ0xkBdED5A/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="Spring Boot" scheme="searchisko:content:tags" /><author><name>John Clingan</name></author><id>searchisko:content:id:jbossorg_blog-autowire_microprofile_into_spring_with_quarkus</id><updated>2019-09-17T07:00:03Z</updated><published>2019-09-17T07:00:03Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/blog/2019/02/28/jumpstart-microservices-microprofile-starter-beta/"&gt;Eclipse MicroProfile&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/spring-boot/"&gt;Spring Boot&lt;/a&gt; are often thought of as separate and distinct APIs when developing &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;. Developers default to their mental muscle memory by leveraging the APIs that they use on a daily basis. Learning new frameworks and runtimes can be a significant time investment. This article aims to ease the introduction to some popular &lt;a href="https://developers.redhat.com/blog/2018/11/21/eclipse-microprofile-for-spring-boot-developers/"&gt;MicroProfile APIs for Spring developers&lt;/a&gt; by enabling them to utilize the Spring APIs they already know while benefiting from significant new capabilities offered by &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;More specifically, this article covers the scope and details of the Spring APIs supported by Quarkus so Spring developers have a grasp of the foundation they can build on with MicroProfile APIs. The article then covers MicroProfile APIs that Spring developers will find helpful in the development of microservices. Only a subset of MicroProfile is covered.&lt;span id="more-628717"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Why Quarkus? Live coding is one reason, where any change is automatically reloaded whether MicroProfile, Spring, or any other Java API. Just run &lt;code&gt;mvn quarkus:dev&lt;/code&gt;. That&amp;#8217;s it. A second compelling reason is that the &lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt;example project&lt;/a&gt;&amp;#8216;s Person service, which compiles Spring, MicroProfile, and JPA APIs to a native binary, starts in 0.055 seconds and uses ~90MB of RAM (RSS) after hitting the application RESTful endpoints. Run &lt;code&gt;mvn package -Pnative&lt;/code&gt; to compile to a native binary. That&amp;#8217;s it.&lt;/p&gt; &lt;p&gt;This article will not go into detailed comparisons, but should give the Spring developers an understanding of how the Spring and MicroProfile APIs can be used together with Quarkus.&lt;/p&gt; &lt;h2&gt;Containers and Kubernetes&lt;/h2&gt; &lt;p&gt;This article will only cover &lt;a href="https://developers.redhat.com/developer-tools/kubernetes"&gt;Kubernetes&lt;/a&gt; support at a high level to keep this article short(er), but it is important to briefly discuss. One of the Quarkus key value propositions is &amp;#8220;Kubernetes-native Java,&amp;#8221; where the goal is to minimize the memory footprint and reduce the startup time. The reduced memory footprint helps drive up the density of applications on the same hardware, reducing overall costs.&lt;/p&gt; &lt;p&gt;Quarkus also &lt;a href="https://quarkus.io/guides/kubernetes-resources"&gt;supports auto-generation&lt;/a&gt; of a Kubernetes resources, and &lt;a href="https://quarkus.io/guides/"&gt;guides&lt;/a&gt; are available on deploying to Kubernetes and &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; as well. Additionally, a Dockerfile.jvm (JVM packaging) and Dockerfile.native (native binary packaging) are generated automatically for container creation.&lt;/p&gt; &lt;p&gt;Last, given that Quarkus considers Kubernetes a target deployment environment, it forgoes using Java frameworks when inherent Kubernetes capabilities are available. Table 1 briefly maps Java frameworks typically used by Spring developers with Kubernetes built-in capabilities.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 1: Java framework to Kubernetes mapping&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Capability&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Traditional Spring Boot&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Kubernetes&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Service discovery&lt;/td&gt; &lt;td&gt;Eureka&lt;/td&gt; &lt;td&gt;DNS&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Configuration&lt;/td&gt; &lt;td&gt;Spring Cloud Config&lt;/td&gt; &lt;td&gt;Config Maps / Secrets&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Load balancing&lt;/td&gt; &lt;td&gt;Service, Replication Controller&lt;br /&gt; (&amp;#8220;server side&amp;#8221;)&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2&gt;Compiling and running the example code&lt;/h2&gt; &lt;p&gt;This article is accompanied by an &lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt;example project&lt;/a&gt; that utilizes Spring and MicroProfile APIs together in the same project, and even the same Java class. The code can be compiled and run from the command line. Be sure to read the README.md for instructions.&lt;/p&gt; &lt;h2&gt;Spring Framework APIs&lt;/h2&gt; &lt;h3&gt;Dependency Injection&lt;/h3&gt; &lt;p&gt;Quarkus supports many &lt;a href="https://quarkus.io/guides/cdi-reference"&gt;Contexts and Dependency Injection (CDI) APIs&lt;/a&gt; and Spring Dependency Injection (Spring DI) APIs. MicroProfile, &lt;a href="https://developers.redhat.com/blog/2019/09/12/jakarta-ee-8-the-new-era-of-java-ee-explained/"&gt;Java EE, and Jakarta EE&lt;/a&gt; developers will be very familiar with CDI. Spring developers, on the other hand, can use the &lt;i&gt;Quarkus Extension for Spring DI API&lt;/i&gt; for Spring DI compatibility. Table 2 covers a sample of the supported Spring DI APIs.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt;example project&lt;/a&gt; utilizes both CDI and Spring Dependency Injection, and the Quarkus &lt;a href="https://quarkus.io/guides/spring-di-guide"&gt;Spring DI Guide&lt;/a&gt; goes into greater detail along with additional examples.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 2: Sample of supported Spring DI APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="text-align: center;"&gt;&lt;b&gt;Spring DI&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Supported Feature&lt;/b&gt;&lt;/p&gt; &lt;/td&gt; &lt;td style="text-align: center;"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Constructor Injection&lt;/td&gt; &lt;td&gt; &lt;pre&gt;public PersonSpringController( PersonSpringRepository personRepository, // injected PersonSpringMPService personService) { // injected this.personRepository = personRepository; this.personService = personService; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Field Injection&lt;br /&gt; @Autowired&lt;br /&gt; @Value&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Autowired @RestClient SalutationRestClient salutationRestClient; @Value("${fallbackSalutation}") String fallbackSalutation;&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Bean&lt;br /&gt; @Configuration&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Configuration public class AppConfiguration { @Bean(name = "capitalizeFunction") public StringFunction capitalizer() { return String::toUpperCase; } }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Component&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Component("noopFunction") public class NoOpSingleStringFunction implements StringFunction { @Override public String apply(String s) { return s; } }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Service&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Service public class MessageProducer { @Value("${greeting.message}") String message; public String getPrefix() { return message; } }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h3&gt;Web framework&lt;/h3&gt; &lt;p&gt;MicroProfile developers will be comfortable with the Quarkus support for JAX-RS, MicroProfile Rest Client, JSON-P and JSON-B as the core web programming model. Spring developers may be surprised to know that Quarkus has recently added Spring Web API support, specifically around Spring REST-related APIs. As with Spring DI, the goal of Spring Web API support is to make Spring developers feel at home using Spring Web API and MicroProfile APIs together. Table 3 covers a sample of supported Spring Web APIs.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt;example project&lt;/a&gt; utilizes Spring Web and MicroProfile Rest Client APIs, and the Quarkus &lt;a href="https://quarkus.io/guides/spring-web-guide"&gt;Spring Web Guide&lt;/a&gt; goes into greater detail along with additional examples.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 3: Sample of supported Spring Web APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="text-align: center;"&gt;&lt;b&gt;Spring Web&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Supported Feature&lt;/b&gt;&lt;/p&gt; &lt;/td&gt; &lt;td style="text-align: center;"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@RestController&lt;br /&gt; @RequestMapping&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@RestController @RequestMapping("/person") public class PersonSpringController { ... ... ... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@GetMapping&lt;br /&gt; @PostMapping&lt;br /&gt; @PutMapping&lt;br /&gt; @DeleteMapping&lt;br /&gt; @PatchMapping&lt;br /&gt; @RequestParam&lt;br /&gt; @RequestHeader&lt;br /&gt; @MatrixVariable&lt;br /&gt; @PathVariable&lt;br /&gt; @CookieValue&lt;br /&gt; @RequestBody&lt;br /&gt; @ResponseStatus&lt;br /&gt; @ExceptionHandler&lt;br /&gt; @RestControllerAdvice (partial)&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@GetMapping(path = "/greet/{id}", produces = "text/plain") public String greetPerson( @PathVariable(name = "id") long id) { ... ... ... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h3&gt;Spring Data JPA&lt;/h3&gt; &lt;p&gt;MicroProfile developers will be comfortable with the Quarkus JPA support using Hibernate ORM. Spring developers, have no fear! Quarkus has support for commonly used Spring Data JPA annotations and types. Table 4 covers a sample of supported Spring Data JPA APIs.&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The &lt;/span&gt;&lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt;&lt;span style="font-weight: 400;"&gt;example project&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; utilizes the Spring Data JPA repository APIs, and the Quarkus &lt;/span&gt;&lt;a href="https://quarkus.io/guides/spring-data-jpa-guide"&gt;&lt;span style="font-weight: 400;"&gt;Spring Data JPA Guide&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; goes into greater detail along with additional examples.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 4: Sample of supported Spring Data JPA APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="text-align: center;"&gt;&lt;b&gt;Spring Data JPA&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Supported Feature&lt;/b&gt;&lt;/p&gt; &lt;/td&gt; &lt;td style="text-align: center;"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;span style="font-weight: 400;"&gt;CrudRepository&lt;/span&gt;&lt;/td&gt; &lt;td&gt; &lt;pre&gt;public interface PersonRepository extends JpaRepository, PersonFragment { ... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Repository&lt;/p&gt; &lt;p&gt;JpaRepository&lt;/p&gt; &lt;p&gt;PagingAndSortingRepository&lt;/td&gt; &lt;td&gt; &lt;pre&gt;public class PersonRepository extends Repository { Person save(Person entity); Optional findById(Person entity); }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;span style="font-weight: 400;"&gt;Repository Fragments&lt;/span&gt;&lt;/td&gt; &lt;td&gt; &lt;pre&gt;public interface PersonRepository extends JpaRepository, PersonFragment { ... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Derived query methods&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/td&gt; &lt;td&gt; &lt;pre&gt;public interface PersonRepository extends CrudRepository { List findByName(String name); Person findByNameBySsn(String ssn); Optional findByNameBySsnIgnoreCase(String ssn); Boolean existsBookByYearOfBirthBetween( Integer start, Integer end); }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;span style="font-weight: 400;"&gt;User-defined queries&lt;/span&gt;&lt;/td&gt; &lt;td&gt; &lt;pre&gt;public interface MovieRepository extends CrudRepository { Movie findFirstByOrderByDurationDesc(); @Query("select m from Movie m where m.rating = ?1") Iterator findByRating(String rating); @Query("from Movie where title = ?1") Movie findByTitle(String title); }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2&gt;MicroProfile APIs&lt;/h2&gt; &lt;h3&gt;Fault tolerance&lt;/h3&gt; &lt;p&gt;Fault tolerance patterns are critical to prevent cascading failures and to create a reliable microservice architecture. &lt;a href="https://github.com/Netflix/Hystrix"&gt;Hystrix&lt;/a&gt; circuit-breaking has been a &amp;#8220;go-to&amp;#8221; fault tolerance pattern for Spring developers for years. However, Hystrix is in maintenance mode. MicroProfile Fault Tolerance is in active development and developers have been using it in production for years now. Quarkus recommends using MicroProfile Fault Tolerance APIs to improve service reliability. Table 5 covers a sample of the MicroProfile Fault Tolerance APIs.&lt;/p&gt; &lt;p&gt;The&lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt; example project&lt;/a&gt; uses the MicroProfile Fault Tolerance API, @Timeout and @Fallback in particular. The Quarkus &lt;a href="https://quarkus.io/guides/fault-tolerance-guide"&gt;Fault Tolerance Guide&lt;/a&gt; goes into greater detail along with additional examples.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 5: Sample of MicroProfile Fault Tolerance APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="text-align: center;"&gt;&lt;b&gt;MicroProfile Fault Tolerance&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Feature&lt;/b&gt;&lt;/p&gt; &lt;/td&gt; &lt;td style="text-align: center;"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; &lt;td style="text-align: center;"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Asynchronous&lt;/td&gt; &lt;td&gt;Execute logic on a separate thread&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Asynchronous @Retry public Future&amp;#60;String&amp;#62; getSalutation() {   ...   return future; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Bulkhead&lt;/td&gt; &lt;td&gt;Limits number of concurrent requests&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Bulkhead(5) public void fiveConcurrent() {   makeRemoteCall(); //... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@CircuitBreaker&lt;/td&gt; &lt;td&gt;Gracefully handle faults and fault recovery&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@CircuitBreaker(delay=500 &lt;i&gt;// milliseconds&lt;/i&gt;   failureRatio = .75,   requestVolumeThreshold = 20,   successThreshold = 5) @Fallback(fallbackMethod = "fallback") public String getSalutation() {   makeRemoteCall(); &lt;i&gt;//...&lt;/i&gt; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Fallback&lt;/td&gt; &lt;td&gt;Alternative logic called upon failure&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Timeout(500) &lt;i&gt;// milliseconds&lt;/i&gt; @Fallback(fallbackMethod = "fallback") public String getSalutation() {   makeRemoteCall(); &lt;i&gt;//...&lt;/i&gt; } public String fallback() {   return "hello"; } &lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Retry&lt;/td&gt; &lt;td&gt;Retry a request&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Retry(maxRetries=3) public String getSalutation() { makeRemoteCall(); //... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Timeout&lt;/td&gt; &lt;td&gt;Wait period before assuming failure&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Timeout(value = 500 ) &lt;i&gt;// milliseconds&lt;/i&gt; @Fallback(fallbackMethod = "fallback") public String getSalutation() {   makeRemoteCall(); //... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h3&gt;Service Health&lt;/h3&gt; &lt;p&gt;Platforms like Kubernetes utilize probes to check the health of a container. Spring developers utilize a custom HealthIndicator and Spring Boot Actuator to expose the health of a service to the underlying platform. With Quarkus, Spring developers can utilize MicroProfile Health to expose the health of a service. A default liveness check is provided, and developers can provide custom liveness and readiness checks as well. Table 6 covers a sample of the MicroProfile Health APIs.&lt;/p&gt; &lt;p&gt;The&lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt; example project&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; uses MicroProfile Health to expose the readiness of an application. The Quarkus &lt;a href="https://quarkus.io/guides/health-guide"&gt;Health Guide&lt;/a&gt; goes into greater detail along with additional examples.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 6: Sample of MicroProfile Health APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="text-align: center;"&gt;&lt;b&gt;MicroProfile Health&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Feature&lt;/b&gt;&lt;/p&gt; &lt;/td&gt; &lt;td style="text-align: center;"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; &lt;td style="text-align: center;"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Liveness&lt;/td&gt; &lt;td&gt;Platform will reboot unhealthy containerized applications.&lt;/p&gt; &lt;p&gt;Endpoint:&lt;br /&gt; host:8080/health/live&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Liveness public class MyHC implements HealthCheck {   public HealthCheckResponse call() {    ...   return HealthCheckResponse     .named("myHCProbe")     .status(ready ? true:false)     .withData("mydata", data)     .build();  }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Readiness&lt;/td&gt; &lt;td&gt;Platform will not direct traffic to containerized applications that are not ready.&lt;/p&gt; &lt;p&gt;Endpoint:&lt;br /&gt; host:8080/health/ready&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Readiness public class MyHC implements HealthCheck {   public HealthCheckResponse call() {    ...   return HealthCheckResponse     .named("myHCProbe")     .status(live ? true:false)     .withData("mydata", data)     .build();  }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h3&gt;Metrics&lt;/h3&gt; &lt;p&gt;Applications expose metrics for operational reasons (like performance SLAs) and non-operational reasons (like business SLAs). Spring developers typically utilize Spring Boot Actuator and Micrometer to expose metrics. Quarkus utilizes MicroProfile Metrics to expose base (JVM &amp;#38; Operating System), Vendor (Quarkus), and application metrics. MicroProfile Metrics requires JSON and OpenMetrics (Prometheus) output formats be supported by implementations. Table 7 covers a sample of the MicroProfile Metrics APIs.&lt;/p&gt; &lt;p&gt;The&lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt; example project&lt;/a&gt; uses MicroProfile Metrics to expose the application metrics. The Quarkus &lt;a href="https://quarkus.io/guides/metrics-guide"&gt;Metrics Guide&lt;/a&gt; goes into greater detail along with additional examples.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 7: Sample of MicroProfile Metrics APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="text-align: center;"&gt;&lt;b&gt;MicroProfile Metrics&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Feature&lt;/b&gt;&lt;/p&gt; &lt;/td&gt; &lt;td style="text-align: center;"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; &lt;td style="text-align: center;"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Counted&lt;/td&gt; &lt;td&gt;Denotes a counter which counts the invocations of the annotated object.&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Counted(name = "fallbackCounter",   displayName = "Fallback Counter",   description = "Fallback Counter") public String salutationFallback() {   return fallbackSalutation; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@ConcurrentGauge&lt;/td&gt; &lt;td&gt;Denotes a gauge which counts the parallel invocations of the annotated object.&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@ConcurrentGuage(   name = "fallbackConcurrentGauge",   displayName="Fallback Concurrent",   description="Fallback Concurrent") public String salutationFallback() {   return fallbackSalutation; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Gauge&lt;/td&gt; &lt;td&gt;Denotes a gauge, which samples the&lt;br /&gt; value of the annotated object.&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Metered(name = "FallbackGauge",   displayName="Fallback Gauge", description="Fallback frequency") public String salutationFallback() {   return fallbackSalutation; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Metered&lt;/td&gt; &lt;td&gt;Denotes a meter which tracks the frequency of invocations of the annotated object.&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Metered(name = "MeteredFallback",   displayName="Metered Fallback", description="Fallback frequency") public String salutationFallback() {   return fallbackSalutation; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Metric&lt;/td&gt; &lt;td&gt;An annotation that contains the metadata&lt;br /&gt; information when requesting a metric to&lt;br /&gt; be injected or produced.&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Metric @Metered(name = "MeteredFallback",   displayName="Metered Fallback", description="Fallback frequency") public String salutationFallback() {   return fallbackSalutation; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Timed&lt;/td&gt; &lt;td&gt;Denotes a timer which tracks duration of&lt;br /&gt; the annotated object.&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Timed(name = "TimedFallback",   displayName="Timed Fallback", description="Fallback delay") public String salutationFallback() {   return fallbackSalutation; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan="3"&gt;&lt;b&gt;Metrics Endpoints&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Application metrics&lt;/td&gt; &lt;td colspan="2"&gt;http://localhost:8080/metrics/application&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Base metrics&lt;/td&gt; &lt;td colspan="2"&gt;http://localhost:8080/metrics/base&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Vendor metrics&lt;/td&gt; &lt;td colspan="2"&gt;http://localhost:8080/metrics/vendor&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;All metrics&lt;/td&gt; &lt;td colspan="2"&gt;http://localhost:8080/metrics&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h3&gt;MicroProfile Rest Client&lt;/h3&gt; &lt;p&gt;Microservices often expose RESTful endpoints, requiring a client API to consume a RESTful endpoint. Spring developers typically use a RestTemplate to consume RESTful endpoints. Quarkus supports the MicroProfile Rest Client API to do the same. Table 8 covers a sample of MicroProfile Rest Client APIs.&lt;/p&gt; &lt;p&gt;The&lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt; example project&lt;/a&gt; uses MicroProfile Rest Client to consume RESTful endpoints. The Quarkus &lt;a href="https://quarkus.io/guides/rest-client-guide"&gt;Rest Client Guide&lt;/a&gt; goes into greater detail along with additional examples.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 8: Sample of MicroProfile Rest Client APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style="text-align: center;"&gt;&lt;b&gt;MicroProfile&lt;/b&gt;&lt;b&gt;&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Rest Client&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Feature&lt;/b&gt;&lt;/td&gt; &lt;td style="text-align: center;"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; &lt;td style="text-align: center;"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@RegisterRestClient&lt;/td&gt; &lt;td&gt;Register a typed Java interface as a REST client&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@RegisterRestClient @Path("/") public interface MyRestClient {     @GET     @Produces(MediaType.TEXT_PLAIN)     public String getSalutation(); }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@RestClient&lt;/td&gt; &lt;td&gt;Decorate  instance injection of a typed REST client interface&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Autowired // or @Inject @RestClient MyRestClient restClient;&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Invocation&lt;/td&gt; &lt;td&gt;Invoke REST endpoint&lt;/td&gt; &lt;td&gt; &lt;pre&gt;System.out.println( restClient.getSalutation());&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;mp-rest/url&lt;/td&gt; &lt;td&gt;Specify rest endpoint&lt;/td&gt; &lt;td&gt; &lt;pre&gt;application.properties: org.example.MyRestClient/mp-rest/url= http://localhost:8081/myendpoint&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;This article provided an overview, primarily for Spring developers, on using Spring APIs together and MicroProfile APIs with Quarkus. Spring developers can now use some of the APIs they know and love, combined with MicroProfile APIs, to live code Java microservices and then compile them to a native binary savings 100&amp;#8217;s of MB of RAM while starting in milliseconds.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The &lt;a href="https://quarkus.io/guides/"&gt;Quarkus guides&lt;/a&gt; provide more details around Spring and MicroProfile API support, and much more.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=%40Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=%40Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=%40Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=%40Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=%40Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=%40Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=%40Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F17%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#038;title=%40Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" data-a2a-url="https://developers.redhat.com/blog/2019/09/17/autowire-microprofile-into-spring-with-quarkus/" data-a2a-title="@Autowire MicroProfile into Spring with Quarkus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/17/autowire-microprofile-into-spring-with-quarkus/"&gt;@Autowire MicroProfile into Spring with Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/MQ0xkBdED5A" height="1" width="1" alt=""/&gt;</content><summary>Eclipse MicroProfile and Spring Boot are often thought of as separate and distinct APIs when developing Java microservices. Developers default to their mental muscle memory by leveraging the APIs that they use on a daily basis. Learning new frameworks and runtimes can be a significant time investment. This article aims to ease the introduction to some popular MicroProfile APIs for Spring developer...</summary><dc:creator>John Clingan</dc:creator><dc:date>2019-09-17T07:00:03Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/17/autowire-microprofile-into-spring-with-quarkus/</feedburner:origLink></entry></feed>
